{
  "timestamp": "2024-02-12T22:02:51",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.12.1",
    "typescriptVersion": "5.3.3"
  },
  "components": [
    {
      "filePath": "src/components/badge/badge.tsx",
      "encapsulation": "shadow",
      "tag": "any-badge",
      "readme": "# any-badge-overlay\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "severity",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "severity",
          "reflectToAttr": false,
          "docs": "Severity type of the badge.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the badge, valid options are \"large\" and \"xlarge\".",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Style class of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value to display inside the badge.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "any-badge",
          "docs": ""
        }
      ],
      "dependents": [
        "any-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "any-button": [
          "any-badge"
        ]
      }
    },
    {
      "filePath": "src/components/badge-overlay/badge-overlay.tsx",
      "encapsulation": "shadow",
      "tag": "any-badge-overlay",
      "readme": "# any-badge-overlay\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "styleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Style class of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/button/button.tsx",
      "encapsulation": "shadow",
      "tag": "any-button",
      "readme": "# any-button\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the element.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "badge",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "badge",
          "reflectToAttr": false,
          "docs": "Value of the badge.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "badgeClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "badge-class",
          "reflectToAttr": false,
          "docs": "Style class of the badge.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the component should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Name of the icon.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconHeight",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-height",
          "reflectToAttr": false,
          "docs": "Height of the icon",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPos",
          "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
          "complexType": {
            "original": "\"left\" | \"right\" | \"top\" | \"bottom\"",
            "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-pos",
          "reflectToAttr": false,
          "docs": "Position of the icon, valid values are \"left\" and \"right\".",
          "docsTags": [],
          "default": "\"left\"",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-width",
          "reflectToAttr": false,
          "docs": "Width of the icon",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Text of the button.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "Whether the button is in loading state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loadingIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "loading-icon",
          "reflectToAttr": false,
          "docs": "Icon to display in loading state.",
          "docsTags": [],
          "default": "\"fa-solid:spinner\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loadingIconStyleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "loading-icon-style-class",
          "reflectToAttr": false,
          "docs": "Style class of the icon element",
          "docsTags": [],
          "default": "\"any-spin\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Style class of the element.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "\"button\" | \"submit\" | \"reset\"",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of the button.",
          "docsTags": [],
          "default": "\"button\"",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getButtonRef",
          "returns": {
            "type": "Promise<HTMLButtonElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLButtonElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLButtonElement": {
                "location": "global",
                "id": "global::HTMLButtonElement"
              }
            },
            "return": "Promise<HTMLButtonElement>"
          },
          "signature": "getButtonRef() => Promise<HTMLButtonElement>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "aOnBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to execute when button loses focus.",
          "docsTags": []
        },
        {
          "event": "aOnClick",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to execute when button is clicked.",
          "docsTags": []
        },
        {
          "event": "aOnFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to execute when button is focused.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "any-button",
          "docs": ""
        },
        {
          "name": "any-button-label",
          "docs": ""
        }
      ],
      "dependents": [
        "any-input-number",
        "app-code",
        "app-doc"
      ],
      "dependencies": [
        "any-badge",
        "any-ripple-effect"
      ],
      "dependencyGraph": {
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "any-input-number": [
          "any-button"
        ],
        "app-code": [
          "any-button"
        ],
        "app-doc": [
          "any-button"
        ]
      }
    },
    {
      "filePath": "src/components/checkbox/checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "any-checkbox",
      "readme": "# any-checkbox\r\n\r\n\r\n\r",
      "docs": "Checkbox is an extension to the standard checkbox element with theming.",
      "docsTags": [
        {
          "name": "part",
          "text": "any-checkbox-box-highlight - This represents the container that encapsulates the checkbox mark and its associated visual elements."
        },
        {
          "name": "part",
          "text": "any-checkbox-box - This refers to the actual checkmark symbol within the checkbox, indicating the checked state of the component."
        },
        {
          "name": "slot",
          "text": "label - Represents the label or content associated with the checkbox.\nUse this slot to provide descriptive text or additional content that accompanies the checkbox."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyTabIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "any-tab-index",
          "reflectToAttr": false,
          "docs": "Index of the element in tabbing order",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "binary",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "binary",
          "reflectToAttr": false,
          "docs": "Allows to select a boolean value instead of multiple values.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checkboxIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "checkbox-icon",
          "reflectToAttr": false,
          "docs": "Icon class of the checkbox icon.",
          "docsTags": [],
          "default": "\"fa-solid:check\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "If `true`, the checkbox is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`any-cb-${checkboxIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the checkbox.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelStyleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label-style-class",
          "reflectToAttr": false,
          "docs": "Style class of the label.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the checkbox group.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the component cannot be edited.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Style class of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the checkbox does not mean if it's checked or not, use the `checked`\nproperty for that.\n\nThe value of a checkbox is analogous to the value of an `<input type=\"checkbox\">`,\nit's only used when the checkbox participates in a native `<form>`.",
          "docsTags": [],
          "default": "\"on\"",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "inputFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "inputFocus() => Promise<void>",
          "parameters": [],
          "docs": "Focuses on the checkbox element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "aOnBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle loses focus.",
          "docsTags": []
        },
        {
          "event": "aOnFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle has focus.",
          "docsTags": []
        },
        {
          "event": "valueChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": false,
          "docs": "Callback to invoke when value of dropdown changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--checkboxActiveBg",
          "annotation": "prop",
          "docs": "The background color of the checkbox when active."
        },
        {
          "name": "--checkboxActiveBorderColor",
          "annotation": "prop",
          "docs": "The border color of the checkbox when active."
        },
        {
          "name": "--checkboxActiveHoverBg",
          "annotation": "prop",
          "docs": "The background color of the checkbox when active and hovered."
        },
        {
          "name": "--checkboxActiveHoverBorderColor",
          "annotation": "prop",
          "docs": "The border color of the checkbox when active and hovered."
        },
        {
          "name": "--checkboxBorder",
          "annotation": "prop",
          "docs": "The border of the checkbox."
        },
        {
          "name": "--checkboxHeight",
          "annotation": "prop",
          "docs": "The height of the checkbox."
        },
        {
          "name": "--checkboxIconActiveColor",
          "annotation": "prop",
          "docs": "The color of the checkbox icon when active."
        },
        {
          "name": "--checkboxIconActiveHoverColor",
          "annotation": "prop",
          "docs": "The color of the checkbox icon when active and hovered."
        },
        {
          "name": "--checkboxIconFontSize",
          "annotation": "prop",
          "docs": "The font size of the checkbox icon."
        },
        {
          "name": "--checkboxWidth",
          "annotation": "prop",
          "docs": "The width of the checkbox."
        }
      ],
      "slots": [
        {
          "name": "label",
          "docs": "Represents the label or content associated with the checkbox.\nUse this slot to provide descriptive text or additional content that accompanies the checkbox."
        }
      ],
      "parts": [
        {
          "name": "any-checkbox-box",
          "docs": "This refers to the actual checkmark symbol within the checkbox, indicating the checked state of the component."
        },
        {
          "name": "any-checkbox-box-highlight",
          "docs": "This represents the container that encapsulates the checkbox mark and its associated visual elements."
        }
      ],
      "dependents": [
        "any-listbox",
        "checkbox-basic",
        "checkbox-disabled",
        "checkbox-dynamic",
        "checkbox-group",
        "checkbox-label",
        "checkbox-readonly"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "any-listbox": [
          "any-checkbox"
        ],
        "checkbox-basic": [
          "any-checkbox"
        ],
        "checkbox-disabled": [
          "any-checkbox"
        ],
        "checkbox-dynamic": [
          "any-checkbox"
        ],
        "checkbox-group": [
          "any-checkbox"
        ],
        "checkbox-label": [
          "any-checkbox"
        ],
        "checkbox-readonly": [
          "any-checkbox"
        ]
      }
    },
    {
      "filePath": "src/components/dropdown/dropdown.tsx",
      "encapsulation": "shadow",
      "tag": "any-dropdown",
      "readme": "# AnyDropdown\r\n\r\n\r\n\r",
      "docs": "Dropdown, also known as Select, is used to choose an item from a collection of options.",
      "docsTags": [
        {
          "name": "part",
          "text": "any-dropdown - This refers to the actual component."
        },
        {
          "name": "slot",
          "text": "item - Represents individual items in the dropdown list.\r\nUse this slot to customize the appearance of each item in the list."
        },
        {
          "name": "slot",
          "text": "selectedItem - Represents the currently selected item in the dropdown.\r\nUse this slot to customize the appearance of the selected item in the dropdown."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the element.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "anyTabIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "any-tab-index",
          "reflectToAttr": false,
          "docs": "Index of the element in tabbing order.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autoZIndex",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-z-index",
          "reflectToAttr": false,
          "docs": "Whether to automatically manage layering.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "baseZIndex",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "base-z-index",
          "reflectToAttr": false,
          "docs": "Base zIndex value to use in layering.",
          "docsTags": [],
          "default": "\"0\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "clearIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "clear-icon",
          "reflectToAttr": false,
          "docs": "Icon class of the dropdown clear icon.",
          "docsTags": [],
          "default": "\"fa-solid:times\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dropdownIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "dropdown-icon",
          "reflectToAttr": false,
          "docs": "Icon class of the dropdown icon.",
          "docsTags": [],
          "default": "\"fa-solid:chevron-down\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "filter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filter",
          "reflectToAttr": false,
          "docs": "When specified, displays a filter input at header.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideAnimation",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-animation",
          "reflectToAttr": false,
          "docs": "Transition options of the hide animation.",
          "docsTags": [],
          "default": "\"growUp\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`any-dd-${dropdownIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the dropdown input.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-label",
          "reflectToAttr": false,
          "docs": "Name of the label field of an option",
          "docsTags": [],
          "default": "\"label\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-value",
          "reflectToAttr": false,
          "docs": "Name of the value field of an option.",
          "docsTags": [],
          "default": "\"value\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "options",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "An array of objects to display as the available options.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelScrollHeight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "panel-scroll-height",
          "reflectToAttr": false,
          "docs": "Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.",
          "docsTags": [],
          "default": "\"200px\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Default text to display when no option is selected.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element value cannot be changed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showAnimation",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "show-animation",
          "reflectToAttr": false,
          "docs": "Keyframe name the show animation.",
          "docsTags": [],
          "default": "\"growDown\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showClear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-clear",
          "reflectToAttr": false,
          "docs": "When enabled, a clear icon is displayed to clear the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the dropdown list.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "virtualScroll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "virtual-scroll",
          "reflectToAttr": false,
          "docs": "When present, list virtual scroller is enabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "aOnBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown loses focus.",
          "docsTags": []
        },
        {
          "event": "aOnClick",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when component is clicked.",
          "docsTags": []
        },
        {
          "event": "aOnFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown gets focus.",
          "docsTags": []
        },
        {
          "event": "aOnPanelHide",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown overlay gets hidden.",
          "docsTags": []
        },
        {
          "event": "aOnPanelHideStart",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown overlay before gets hidden.",
          "docsTags": []
        },
        {
          "event": "aOnPanelShow",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown overlay gets visible.",
          "docsTags": []
        },
        {
          "event": "aOnPanelShowStart",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown overlay before gets visible.",
          "docsTags": []
        },
        {
          "event": "valueChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when value of dropdown changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--inputBgColor",
          "annotation": "prop",
          "docs": "The background color of the input field."
        },
        {
          "name": "--inputBorder",
          "annotation": "prop",
          "docs": "The border of the input field."
        },
        {
          "name": "--inputDropdownIconColor",
          "annotation": "prop",
          "docs": "The color of the dropdown icon."
        },
        {
          "name": "--inputErrorBorder",
          "annotation": "prop",
          "docs": "The border of the input field in case of an error."
        },
        {
          "name": "--inputErrorBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field in case of an error, using the --errorColor variable."
        },
        {
          "name": "--inputFilledBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled."
        },
        {
          "name": "--inputFilledFocusBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and focused."
        },
        {
          "name": "--inputFilledHoverBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and hovered."
        },
        {
          "name": "--inputFocusBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on focus, using the --primaryColor variable."
        },
        {
          "name": "--inputHoverBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on hover, using the --primaryColor variable."
        },
        {
          "name": "--inputIconColor",
          "annotation": "prop",
          "docs": "The color of icons within the input field, using the --textColor variable."
        },
        {
          "name": "--inputPadding",
          "annotation": "prop",
          "docs": "The padding of the input field."
        },
        {
          "name": "--inputPlaceholderTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field placeholder."
        },
        {
          "name": "--inputTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field, using the --textColor variable."
        },
        {
          "name": "--inputTransition",
          "annotation": "prop",
          "docs": "The transition effect for the input field, involving border color and box shadow, using the --transitionDuration variable."
        }
      ],
      "slots": [
        {
          "name": "item",
          "docs": "Represents individual items in the dropdown list.\r\nUse this slot to customize the appearance of each item in the list."
        },
        {
          "name": "selectedItem",
          "docs": "Represents the currently selected item in the dropdown.\r\nUse this slot to customize the appearance of the selected item in the dropdown."
        }
      ],
      "parts": [
        {
          "name": "any-dropdown",
          "docs": "This refers to the actual component."
        }
      ],
      "dependents": [
        "dropdown-basic",
        "dropdown-disabled",
        "dropdown-filter",
        "dropdown-template",
        "dropdown-virtual-scroll"
      ],
      "dependencies": [
        "any-overlay",
        "any-listbox"
      ],
      "dependencyGraph": {
        "any-dropdown": [
          "any-overlay",
          "any-listbox"
        ],
        "any-listbox": [
          "any-checkbox",
          "any-input-text",
          "any-ripple-effect",
          "any-virtual-scroller"
        ],
        "dropdown-basic": [
          "any-dropdown"
        ],
        "dropdown-disabled": [
          "any-dropdown"
        ],
        "dropdown-filter": [
          "any-dropdown"
        ],
        "dropdown-template": [
          "any-dropdown"
        ],
        "dropdown-virtual-scroll": [
          "any-dropdown"
        ]
      }
    },
    {
      "filePath": "src/components/input-number/input-number.tsx",
      "encapsulation": "scoped",
      "tag": "any-input-number",
      "readme": "# any-input-number\r\n\r\n\r\n\r",
      "docs": "InputNumber is a component for numeric input, allowing users to input numeric values.",
      "docsTags": [
        {
          "name": "tag",
          "text": "any-input-number - The custom tag for this component."
        },
        {
          "name": "styleUrl",
          "text": "input-number.scss - The stylesheet associated with this component."
        },
        {
          "name": "scoped",
          "text": "true - Indicates that the styles are scoped to this component only."
        },
        {
          "name": "slot",
          "text": "start - Represents the content or elements to be placed before the numeric input.\r\nUse this slot to add any content or components before the input field."
        },
        {
          "name": "slot",
          "text": "end - Represents the content or elements to be placed after the numeric input.\r\nUse this slot to add any content or components after the input field."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "aPrefix",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "a-prefix",
          "reflectToAttr": false,
          "docs": "Text to display before the value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "aSuffix",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "a-suffix",
          "reflectToAttr": false,
          "docs": "Text to display after the value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "aTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "a-title",
          "reflectToAttr": false,
          "docs": "Title text of the input text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "allowEmpty",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allow-empty",
          "reflectToAttr": false,
          "docs": "Determines whether the input field is empty.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyAriaRequired",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "any-aria-required",
          "reflectToAttr": false,
          "docs": "Used to indicate that user input is required on an element before a form can be submitted.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyTabIndex",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "any-tab-index",
          "reflectToAttr": false,
          "docs": "Specifies tab order of the element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Used to define a string that autocomplete attribute the current element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttonLayout",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "button-layout",
          "reflectToAttr": false,
          "docs": "Layout of the buttons, valid values are \"stacked\" (default), \"horizontal\" and \"vertical\".",
          "docsTags": [],
          "default": "\"stacked\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currency",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "currency",
          "reflectToAttr": false,
          "docs": "The currency to use in currency formatting.\r\nPossible values are the ISO 4217 currency codes(https://www.currency-iso.org/en/home/tables/table-a1.html),\r\nsuch as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB.\r\nThere is no default value; if the style is \"currency\", the currency property must be provided.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currencyDisplay",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "currency-display",
          "reflectToAttr": false,
          "docs": "How to display the currency in currency formatting.\r\nPossible values are \"symbol\" to use a localized currency symbol such as €, ü\"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "decrementButtonClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "decrement-button-class",
          "reflectToAttr": false,
          "docs": "Style class of the decrement button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "decrementButtonIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "decrement-button-icon",
          "reflectToAttr": false,
          "docs": "Style class of the decrement button.",
          "docsTags": [],
          "default": "\"fa-solid:angle-down\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "floatLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "float-label",
          "reflectToAttr": false,
          "docs": "When enabled, the label will have floating effect on input text focus",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "Whether to format the value.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "incrementButtonClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "increment-button-class",
          "reflectToAttr": false,
          "docs": "Style class of the increment button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "incrementButtonIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "increment-button-icon",
          "reflectToAttr": false,
          "docs": "Style class of the increment button.",
          "docsTags": [],
          "default": "\"fa-solid:angle-up\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`any-input-number-${inputIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "input-style",
          "reflectToAttr": false,
          "docs": "Inline style of the input field.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputStyleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-style-class",
          "reflectToAttr": false,
          "docs": "Style class of the input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputWrapperClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-wrapper-class",
          "reflectToAttr": false,
          "docs": "The class of input wrapper element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the component",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "Locale to be used in formatting.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "localeMatcher",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "locale-matcher",
          "reflectToAttr": false,
          "docs": "The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\".\r\nSee https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation for details.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Maximum boundary value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxFractionDigits",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-fraction-digits",
          "reflectToAttr": false,
          "docs": "The maximum number of fraction digits to use.\r\nPossible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3;\r\nthe default for currency formatting is the larger of minimumFractionDigits\r\nand the number of minor unit digits provided by the ISO 4217 currency code list (https://www.currency-iso.org/en/home/tables/table-a1.html) (2 if the list doesn't provide that information).",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Maximum number of character allows in the input field.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Mininum boundary value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minFractionDigits",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min-fraction-digits",
          "reflectToAttr": false,
          "docs": "The minimum number of fraction digits to use.\r\nPossible values are from 0 to 20; the default for plain number and percent formatting is 0;\r\nthe default for currency formatting is the number of minor unit digits provided by the\r\nISO 4217 currency code list (https://www.currency-iso.org/en/home/tables/table-a1.html) (2 if the list doesn't provide that information).",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "Defines the behavior of the component, valid values are \"decimal\" and \"currency\".",
          "docsTags": [],
          "default": "\"decimal\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Advisory information to display on input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "When present, it specifies that an input field is read-only.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "When present, it specifies that an input field is required.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showButtons",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-buttons",
          "reflectToAttr": false,
          "docs": "Displays spinner buttons.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the input field.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "Step factor to increment/decrement the value.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Style class of the component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "useGrouping",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "use-grouping",
          "reflectToAttr": false,
          "docs": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "aOnBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when input loses focus.",
          "docsTags": []
        },
        {
          "event": "aOnFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when input receives focus.",
          "docsTags": []
        },
        {
          "event": "aOnInput",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when the value is entered.",
          "docsTags": []
        },
        {
          "event": "aOnKeyDown",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when keyboard key is down.",
          "docsTags": []
        },
        {
          "event": "valueChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when value of componnt changes",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--inputBgColor",
          "annotation": "prop",
          "docs": "The background color of the input field."
        },
        {
          "name": "--inputBorder",
          "annotation": "prop",
          "docs": "The border of the input field."
        },
        {
          "name": "--inputErrorBorder",
          "annotation": "prop",
          "docs": "The border of the input field in case of an error."
        },
        {
          "name": "--inputErrorBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field in case of an error, using the --errorColor variable."
        },
        {
          "name": "--inputFilledBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled."
        },
        {
          "name": "--inputFilledFocusBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and focused."
        },
        {
          "name": "--inputFilledHoverBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and hovered."
        },
        {
          "name": "--inputFocusBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on focus, using the --primaryColor variable."
        },
        {
          "name": "--inputHoverBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on hover, using the --primaryColor variable."
        },
        {
          "name": "--inputIconColor",
          "annotation": "prop",
          "docs": "The color of icons within the input field, using the --textColor variable."
        },
        {
          "name": "--inputPadding",
          "annotation": "prop",
          "docs": "The padding of the input field."
        },
        {
          "name": "--inputPlaceholderTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field placeholder."
        },
        {
          "name": "--inputTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field, using the --textColor variable."
        },
        {
          "name": "--inputTransition",
          "annotation": "prop",
          "docs": "The transition effect for the input field, involving border color and box shadow, using the --transitionDuration variable."
        }
      ],
      "slots": [
        {
          "name": "end",
          "docs": "Represents the content or elements to be placed after the numeric input.\r\nUse this slot to add any content or components after the input field."
        },
        {
          "name": "start",
          "docs": "Represents the content or elements to be placed before the numeric input.\r\nUse this slot to add any content or components before the input field."
        }
      ],
      "parts": [],
      "dependents": [
        "input-number-buttons",
        "input-number-currency",
        "input-number-disabled",
        "input-number-float-label",
        "input-number-locale",
        "input-number-numeral",
        "input-number-prefix-and-suffix",
        "input-number-vertical"
      ],
      "dependencies": [
        "any-input-text",
        "any-button"
      ],
      "dependencyGraph": {
        "any-input-number": [
          "any-input-text",
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "input-number-buttons": [
          "any-input-number"
        ],
        "input-number-currency": [
          "any-input-number"
        ],
        "input-number-disabled": [
          "any-input-number"
        ],
        "input-number-float-label": [
          "any-input-number"
        ],
        "input-number-locale": [
          "any-input-number"
        ],
        "input-number-numeral": [
          "any-input-number"
        ],
        "input-number-prefix-and-suffix": [
          "any-input-number"
        ],
        "input-number-vertical": [
          "any-input-number"
        ]
      }
    },
    {
      "filePath": "src/components/input-switch/input-switch.tsx",
      "encapsulation": "shadow",
      "tag": "any-input-switch",
      "readme": "# any-input-switch\r\n\r\n\r\n\r",
      "docs": "InputSwitch is used to select a boolean value.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyTabIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "any-tab-index",
          "reflectToAttr": false,
          "docs": "Index of the element in tabbing order",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ariaLabeledBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "aria-labeled-by",
          "reflectToAttr": false,
          "docs": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "If `true`, the input-switch is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "falseValue",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "false-value",
          "reflectToAttr": false,
          "docs": "Value in unchecked state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`any-isw-${inputSwitchIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the checkbox group.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the component cannot be edited.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Style class of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trueValue",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "true-value",
          "reflectToAttr": false,
          "docs": "Value in checked state.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "aOnBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle loses focus.",
          "docsTags": []
        },
        {
          "event": "aOnFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle has focus.",
          "docsTags": []
        },
        {
          "event": "valueChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when value of dropdown changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--inputSwitchBorderRadius",
          "annotation": "prop",
          "docs": "The border radius of the input switch."
        },
        {
          "name": "--inputSwitchHandleBorderRadius",
          "annotation": "prop",
          "docs": "The border radius of the input switch handle."
        },
        {
          "name": "--inputSwitchHandleHeight",
          "annotation": "prop",
          "docs": "The height of the input switch handle."
        },
        {
          "name": "--inputSwitchHandleOffBg",
          "annotation": "prop",
          "docs": "The background color of the input switch handle when in the off state."
        },
        {
          "name": "--inputSwitchHandleOnBg",
          "annotation": "prop",
          "docs": "The background color of the input switch handle when in the on state."
        },
        {
          "name": "--inputSwitchHandleWidth",
          "annotation": "prop",
          "docs": "The width of the input switch handle."
        },
        {
          "name": "--inputSwitchHeight",
          "annotation": "prop",
          "docs": "The height of the input switch."
        },
        {
          "name": "--inputSwitchSliderOffBg",
          "annotation": "prop",
          "docs": "The background color of the input switch slider when in the off state."
        },
        {
          "name": "--inputSwitchSliderOffHoverBg",
          "annotation": "prop",
          "docs": "The background color of the input switch slider when in the off state and hovered."
        },
        {
          "name": "--inputSwitchSliderOnBg",
          "annotation": "prop",
          "docs": "The background color of the input switch slider when in the on state, using the --primaryColor variable."
        },
        {
          "name": "--inputSwitchSliderOnHoverBg",
          "annotation": "prop",
          "docs": "The background color of the input switch slider when in the on state and hovered, using the --primaryDarkColor variable."
        },
        {
          "name": "--inputSwitchSliderPadding",
          "annotation": "prop",
          "docs": "The padding of the input switch slider."
        },
        {
          "name": "--inputSwitchWidth",
          "annotation": "prop",
          "docs": "The width of the input switch."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "app-config",
        "input-switch-basic",
        "input-switch-disabled",
        "input-switch-preselection"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "app-config": [
          "any-input-switch"
        ],
        "input-switch-basic": [
          "any-input-switch"
        ],
        "input-switch-disabled": [
          "any-input-switch"
        ],
        "input-switch-preselection": [
          "any-input-switch"
        ]
      }
    },
    {
      "filePath": "src/components/input-text/input-text.tsx",
      "encapsulation": "scoped",
      "tag": "any-input-text",
      "readme": "# any-input-text\r\n\r\n\r\n\r",
      "docs": "The InputText component is a wrapper to the HTML input element with custom styling and additional\r\nfunctionality.",
      "docsTags": [
        {
          "name": "part",
          "text": "any-inputtext - The main input text element."
        },
        {
          "name": "slot",
          "text": "iconLeft - Slot for an icon to be placed on the left side of the input."
        },
        {
          "name": "slot",
          "text": "start - Slot for content to be placed at the start of the input."
        },
        {
          "name": "slot",
          "text": "end - Slot for content to be placed at the end of the input."
        },
        {
          "name": "slot",
          "text": "iconRight - Slot for an icon to be placed on the right side of the input."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "aTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "a-title",
          "reflectToAttr": false,
          "docs": "Title text of the input text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyAriaRequired",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "any-aria-required",
          "reflectToAttr": false,
          "docs": "Used to indicate that user input is required on an element before a form can be submitted.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyTabIndex",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "any-tab-index",
          "reflectToAttr": false,
          "docs": "Specifies tab order of the element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Used to define a string that autocomplete attribute the current element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "floatLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "float-label",
          "reflectToAttr": false,
          "docs": "When enabled, the label will have floating effect on input text focus",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-class",
          "reflectToAttr": false,
          "docs": "Inline style of the element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputHolderClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-holder-class",
          "reflectToAttr": false,
          "docs": "The class of input holder element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`any-input-text-${inputIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "input-style",
          "reflectToAttr": false,
          "docs": "Inline style of the element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputWrapperClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-wrapper-class",
          "reflectToAttr": false,
          "docs": "The class of input wrapper element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the input text",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leftIconClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "left-icon-class",
          "reflectToAttr": false,
          "docs": "The class of left icon wrapper element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Maximum number of character allows in the input field.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the input text.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Default text to display when no value in input text",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element value cannot be changed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "When present, it specifies that an input field is required.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rightIconClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "right-icon-class",
          "reflectToAttr": false,
          "docs": "The class of right icon wrapper element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the input field.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the input text",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputRef",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": "The input element, or null if not found."
          },
          "complexType": {
            "signature": "() => Promise<HTMLInputElement | null>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<HTMLInputElement>"
          },
          "signature": "getInputRef() => Promise<HTMLInputElement | null>",
          "parameters": [],
          "docs": "Retrieves a reference to the input element within the component.",
          "docsTags": [
            {
              "name": "returns",
              "text": "The input element, or null if not found."
            },
            {
              "name": "example",
              "text": "const inputElement = await myComponent.getInputRef();\r\nif (inputElement) {\r\n  // Do something with the input element\r\n  inputElement.focus();\r\n}"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "valueChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when value of input text changes",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--inputBgColor",
          "annotation": "prop",
          "docs": "The background color of the input field."
        },
        {
          "name": "--inputBorder",
          "annotation": "prop",
          "docs": "The border of the input field."
        },
        {
          "name": "--inputErrorBorder",
          "annotation": "prop",
          "docs": "The border of the input field in case of an error."
        },
        {
          "name": "--inputErrorBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field in case of an error, using the --errorColor variable."
        },
        {
          "name": "--inputFilledBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled."
        },
        {
          "name": "--inputFilledFocusBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and focused."
        },
        {
          "name": "--inputFilledHoverBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and hovered."
        },
        {
          "name": "--inputFocusBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on focus, using the --primaryColor variable."
        },
        {
          "name": "--inputHoverBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on hover, using the --primaryColor variable."
        },
        {
          "name": "--inputIconColor",
          "annotation": "prop",
          "docs": "The color of icons within the input field, using the --textColor variable."
        },
        {
          "name": "--inputPadding",
          "annotation": "prop",
          "docs": "The padding of the input field."
        },
        {
          "name": "--inputPlaceholderTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field placeholder."
        },
        {
          "name": "--inputTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field, using the --textColor variable."
        },
        {
          "name": "--inputTransition",
          "annotation": "prop",
          "docs": "The transition effect for the input field, involving border color and box shadow, using the --transitionDuration variable."
        }
      ],
      "slots": [
        {
          "name": "end",
          "docs": "Slot for content to be placed at the end of the input."
        },
        {
          "name": "iconLeft",
          "docs": "Slot for an icon to be placed on the left side of the input."
        },
        {
          "name": "iconRight",
          "docs": "Slot for an icon to be placed on the right side of the input."
        },
        {
          "name": "start",
          "docs": "Slot for content to be placed at the start of the input."
        }
      ],
      "parts": [
        {
          "name": "any-inputtext",
          "docs": "The main input text element."
        }
      ],
      "dependents": [
        "any-input-number",
        "any-listbox",
        "input-text-basic",
        "input-text-disabled",
        "input-text-float-label",
        "input-text-icons"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "any-input-number": [
          "any-input-text"
        ],
        "any-listbox": [
          "any-input-text"
        ],
        "input-text-basic": [
          "any-input-text"
        ],
        "input-text-disabled": [
          "any-input-text"
        ],
        "input-text-float-label": [
          "any-input-text"
        ],
        "input-text-icons": [
          "any-input-text"
        ]
      }
    },
    {
      "filePath": "src/components/input-textarea/input-textarea.tsx",
      "encapsulation": "scoped",
      "tag": "any-input-textarea",
      "readme": "# any-input-textarea\r\n\r\n\r\n\r",
      "docs": "The InputTextarea component is a wrapper to the HTML textarea element with custom styling and additional functionality.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autoResize",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-resize",
          "reflectToAttr": false,
          "docs": "When present, textarea size changes as being typed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocapitalize",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\r\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
          "docsTags": [],
          "default": "\"none\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cols",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": false,
          "docs": "The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "floatLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "float-label",
          "reflectToAttr": false,
          "docs": "When enabled, the label will have floating effect on input text focus",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`any-input-textarea-${textareaIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputWrapperClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-wrapper-class",
          "reflectToAttr": false,
          "docs": "The class of input wrapper element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the input text",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the input text.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Default text to display when no value in input textarea",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element value cannot be changed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "The number of visible text lines for the control.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "If `true`, the element will have its spelling and grammar checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string | null",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the textarea.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "wrap",
          "type": "\"hard\" | \"off\" | \"soft\"",
          "complexType": {
            "original": "\"hard\" | \"soft\" | \"off\"",
            "resolved": "\"hard\" | \"off\" | \"soft\"",
            "references": {}
          },
          "mutable": false,
          "attr": "wrap",
          "reflectToAttr": false,
          "docs": "Indicates how the control wraps text.",
          "docsTags": [],
          "values": [
            {
              "value": "hard",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "soft",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLTextAreaElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLTextAreaElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLTextAreaElement": {
                "location": "global",
                "id": "global::HTMLTextAreaElement"
              }
            },
            "return": "Promise<HTMLTextAreaElement>"
          },
          "signature": "getInputElement() => Promise<HTMLTextAreaElement>",
          "parameters": [],
          "docs": "Returns the native `<textarea>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\r\n`textarea.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "aOnBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "complexType": {
            "original": "FocusEvent",
            "resolved": "FocusEvent",
            "references": {
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "aOnFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "complexType": {
            "original": "FocusEvent",
            "resolved": "FocusEvent",
            "references": {
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "aOnInput",
          "detail": "InputEvent",
          "bubbles": true,
          "complexType": {
            "original": "InputEvent",
            "resolved": "InputEvent",
            "references": {
              "InputEvent": {
                "location": "global",
                "id": "global::InputEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "aOnResize",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has resized.",
          "docsTags": []
        },
        {
          "event": "valueChange",
          "detail": "TextareaChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "TextareaChangeEventDetail",
            "resolved": "TextareaChangeEventDetail",
            "references": {
              "TextareaChangeEventDetail": {
                "location": "import",
                "path": "./input-textarea-interface",
                "id": "src/components/input-textarea/input-textarea-interface.ts::TextareaChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--inputBgColor",
          "annotation": "prop",
          "docs": "The background color of the input field."
        },
        {
          "name": "--inputBorder",
          "annotation": "prop",
          "docs": "The border of the input field."
        },
        {
          "name": "--inputErrorBorder",
          "annotation": "prop",
          "docs": "The border of the input field in case of an error."
        },
        {
          "name": "--inputErrorBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field in case of an error, using the --errorColor variable."
        },
        {
          "name": "--inputFilledBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled."
        },
        {
          "name": "--inputFilledFocusBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and focused."
        },
        {
          "name": "--inputFilledHoverBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and hovered."
        },
        {
          "name": "--inputFocusBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on focus, using the --primaryColor variable."
        },
        {
          "name": "--inputHoverBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on hover, using the --primaryColor variable."
        },
        {
          "name": "--inputIconColor",
          "annotation": "prop",
          "docs": "The color of icons within the input field, using the --textColor variable."
        },
        {
          "name": "--inputPadding",
          "annotation": "prop",
          "docs": "The padding of the input field."
        },
        {
          "name": "--inputPlaceholderTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field placeholder."
        },
        {
          "name": "--inputTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field, using the --textColor variable."
        },
        {
          "name": "--inputTransition",
          "annotation": "prop",
          "docs": "The transition effect for the input field, involving border color and box shadow, using the --transitionDuration variable."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "input-textarea-auto-resize",
        "input-textarea-basic",
        "input-textarea-disabled",
        "input-textarea-float-label"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "input-textarea-auto-resize": [
          "any-input-textarea"
        ],
        "input-textarea-basic": [
          "any-input-textarea"
        ],
        "input-textarea-disabled": [
          "any-input-textarea"
        ],
        "input-textarea-float-label": [
          "any-input-textarea"
        ]
      }
    },
    {
      "filePath": "src/components/listbox/listbox.tsx",
      "encapsulation": "shadow",
      "tag": "any-listbox",
      "readme": "# any-listbox\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the element.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checkbox",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "checkbox",
          "reflectToAttr": false,
          "docs": "When specified, allows selecting items with checkboxes.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dataKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "data-key",
          "reflectToAttr": false,
          "docs": "A property to uniquely identify a value in options.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyFilterMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "empty-filter-message",
          "reflectToAttr": false,
          "docs": "Text to display when filtering does not return any results. Defaults to global value in i18n translation configuration.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "empty-message",
          "reflectToAttr": false,
          "docs": "Text to display when there is no data. Defaults to global value in i18n translation configuration.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filter",
          "reflectToAttr": false,
          "docs": "When specified, displays a filter input at header.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-by",
          "reflectToAttr": false,
          "docs": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterLocale",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-locale",
          "reflectToAttr": false,
          "docs": "Locale to use in filtering. The default locale is the host environment's current locale.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterMatchMode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-match-mode",
          "reflectToAttr": false,
          "docs": "Defines how the items are filtered, valid values are \"contains\" (default) \"startsWith\", \"endsWith\", \"equals\", \"notEquals\", \"in\", \"lt\", \"lte\", \"gt\" and \"gte\".",
          "docsTags": [],
          "default": "\"contains\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-value",
          "reflectToAttr": false,
          "docs": "When specified, filter displays with this value.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "group",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "group",
          "reflectToAttr": false,
          "docs": "Whether to display options as grouped when nested options are provided.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`any-lb-${listboxIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "listStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "list-style",
          "reflectToAttr": false,
          "docs": "Inline style of the list element.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "metaKeySelection",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "meta-key-selection",
          "reflectToAttr": false,
          "docs": "Defines how multiple items can be selected, when true metaKey\r\nneeds to be pressed to select or unselect an item and when set to false selection\r\nof each item can be toggled individually. On touch enabled devices,\r\nmetaKeySelection is turned off automatically.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "When specified, allows selecting multiple values.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the dropdown input.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionDisabled",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-disabled",
          "reflectToAttr": false,
          "docs": "Name of the disabled field of an option.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionGroupChildren",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-group-children",
          "reflectToAttr": false,
          "docs": "Name of the options field of an option group.",
          "docsTags": [],
          "default": "\"items\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-label",
          "reflectToAttr": false,
          "docs": "Name of the label field of an option.",
          "docsTags": [],
          "default": "\"label\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-value",
          "reflectToAttr": false,
          "docs": "Name of the value field of an option.",
          "docsTags": [],
          "default": "\"value\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "options",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "An array of objects to display as the available options.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element value cannot be changed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollerHeight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "scroller-height",
          "reflectToAttr": false,
          "docs": "Max height of the content area in inline mode.",
          "docsTags": [],
          "default": "\"200px\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "searchIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "search-icon",
          "reflectToAttr": false,
          "docs": "Icon class of the filter search input icon.",
          "docsTags": [],
          "default": "\"fa-solid:search\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showToggleAll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-toggle-all",
          "reflectToAttr": false,
          "docs": "Whether header checkbox is shown in multiple mode.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the listbox.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "virtualScroll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "virtual-scroll",
          "reflectToAttr": false,
          "docs": "When present, list virtual scroller is enabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFilterInputFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFilterInputFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\r\n`textarea.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "valueChange",
          "detail": "SelectChangeEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "SelectChangeEventDetail",
            "resolved": "SelectChangeEventDetail<any>",
            "references": {
              "SelectChangeEventDetail": {
                "location": "import",
                "path": "./listbox-interface",
                "id": "src/components/listbox/listbox-interface.ts::SelectChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when value of listbox changes",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "items",
          "docs": ""
        }
      ],
      "dependents": [
        "any-dropdown",
        "any-multiselect"
      ],
      "dependencies": [
        "any-checkbox",
        "any-input-text",
        "any-ripple-effect",
        "any-virtual-scroller"
      ],
      "dependencyGraph": {
        "any-listbox": [
          "any-checkbox",
          "any-input-text",
          "any-ripple-effect",
          "any-virtual-scroller"
        ],
        "any-dropdown": [
          "any-listbox"
        ],
        "any-multiselect": [
          "any-listbox"
        ]
      }
    },
    {
      "filePath": "src/components/multiselect/multiselect.tsx",
      "encapsulation": "shadow",
      "tag": "any-multiselect",
      "readme": "# any-multiselect\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "anyTabIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "any-tab-index",
          "reflectToAttr": false,
          "docs": "Index of the element in tabbing order",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "checkbox",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "checkbox",
          "reflectToAttr": false,
          "docs": "When specified, allows selecting items with checkboxes",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "clear-icon",
          "reflectToAttr": false,
          "docs": "Icon class of the dropdown clear icon",
          "docsTags": [],
          "default": "\"fa-solid:times\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dataKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "data-key",
          "reflectToAttr": false,
          "docs": "A property to uniquely identify a value in options",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "default-label",
          "reflectToAttr": false,
          "docs": "When specified, allows selecting items with checkboxes",
          "docsTags": [],
          "default": "this._translations[TranslationKeys.CHOOSE]",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dropdownIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "dropdown-icon",
          "reflectToAttr": false,
          "docs": "Icon class of the dropdown icon",
          "docsTags": [],
          "default": "\"fa-solid:chevron-down\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "filter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filter",
          "reflectToAttr": false,
          "docs": "When specified, displays a filter input at header",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "group",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "group",
          "reflectToAttr": false,
          "docs": "Whether to display options as grouped when nested options are provided",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideAnimation",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-animation",
          "reflectToAttr": false,
          "docs": "Transition options for the hide animation.",
          "docsTags": [],
          "default": "\"growUp\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`any-ms-${multiselectIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the dropdown input.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionGroupChildren",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-group-children",
          "reflectToAttr": false,
          "docs": "Name of the options field of an option group.",
          "docsTags": [],
          "default": "\"items\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-label",
          "reflectToAttr": false,
          "docs": "Name of the label field of an option",
          "docsTags": [],
          "default": "\"label\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-value",
          "reflectToAttr": false,
          "docs": "Name of the value field of an option",
          "docsTags": [],
          "default": "\"value\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "options",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "An array of objects to display as the available options.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelScrollHeight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "panel-scroll-height",
          "reflectToAttr": false,
          "docs": "Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value",
          "docsTags": [],
          "default": "\"200px\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Default text to display when no option is selected",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element value cannot be changed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showAnimation",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "show-animation",
          "reflectToAttr": false,
          "docs": "Keyframe name for the show animation.",
          "docsTags": [],
          "default": "\"growDown\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showClear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-clear",
          "reflectToAttr": false,
          "docs": "When enabled, a clear icon is displayed to clear the value",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showToggleAll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-toggle-all",
          "reflectToAttr": false,
          "docs": "Whether header checkbox is shown in multiple mode",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the dropdown list",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "virtualScroll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "virtual-scroll",
          "reflectToAttr": false,
          "docs": "When present, list virtual scroller is enabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "aOnBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown loses focus",
          "docsTags": []
        },
        {
          "event": "aOnClick",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when component is clicked",
          "docsTags": []
        },
        {
          "event": "aOnFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown gets focus",
          "docsTags": []
        },
        {
          "event": "aOnPanelHide",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown overlay gets hidden",
          "docsTags": []
        },
        {
          "event": "aOnPanelHideStart",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown overlay before gets hidden",
          "docsTags": []
        },
        {
          "event": "aOnPanelShow",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown overlay gets visible",
          "docsTags": []
        },
        {
          "event": "aOnPanelShowStart",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when dropdown overlay before gets visible",
          "docsTags": []
        },
        {
          "event": "valueChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when value of dropdown changes",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--inputBgColor",
          "annotation": "prop",
          "docs": "The background color of the input field."
        },
        {
          "name": "--inputBorder",
          "annotation": "prop",
          "docs": "The border of the input field."
        },
        {
          "name": "--inputErrorBorder",
          "annotation": "prop",
          "docs": "The border of the input field in case of an error."
        },
        {
          "name": "--inputErrorBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field in case of an error, using the --errorColor variable."
        },
        {
          "name": "--inputFilledBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled."
        },
        {
          "name": "--inputFilledFocusBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and focused."
        },
        {
          "name": "--inputFilledHoverBg",
          "annotation": "prop",
          "docs": "The background color of the input field when filled and hovered."
        },
        {
          "name": "--inputFocusBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on focus, using the --primaryColor variable."
        },
        {
          "name": "--inputHoverBorderColor",
          "annotation": "prop",
          "docs": "The border color of the input field on hover, using the --primaryColor variable."
        },
        {
          "name": "--inputIconColor",
          "annotation": "prop",
          "docs": "The color of icons within the input field, using the --textColor variable."
        },
        {
          "name": "--inputPadding",
          "annotation": "prop",
          "docs": "The padding of the input field."
        },
        {
          "name": "--inputPlaceholderTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field placeholder."
        },
        {
          "name": "--inputTextColor",
          "annotation": "prop",
          "docs": "The text color of the input field, using the --textColor variable."
        },
        {
          "name": "--inputTransition",
          "annotation": "prop",
          "docs": "The transition effect for the input field, involving border color and box shadow, using the --transitionDuration variable."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "any-overlay",
        "any-listbox"
      ],
      "dependencyGraph": {
        "any-multiselect": [
          "any-overlay",
          "any-listbox"
        ],
        "any-listbox": [
          "any-checkbox",
          "any-input-text",
          "any-ripple-effect",
          "any-virtual-scroller"
        ]
      }
    },
    {
      "filePath": "src/components/overlay/overlay.tsx",
      "encapsulation": "shadow",
      "tag": "any-overlay",
      "readme": "# any-overlay\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autoZIndex",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-z-index",
          "reflectToAttr": false,
          "docs": "Whether to automatically manage layering",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "baseZIndex",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "base-z-index",
          "reflectToAttr": false,
          "docs": "Base zIndex value to use in layering",
          "docsTags": [],
          "default": "\"0\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hideAnimation",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-animation",
          "reflectToAttr": false,
          "docs": "Transition options for the hide animation.",
          "docsTags": [],
          "default": "\"growUp\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showAnimation",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "show-animation",
          "reflectToAttr": false,
          "docs": "Keyframe name for the show animation.",
          "docsTags": [],
          "default": "\"growDown\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "The target element to attach the dropdown to.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "visible",
          "reflectToAttr": false,
          "docs": "Whether the dropdown is currently visible or hidden.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "aOnHide",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when the dropdown overlay becomes hidden.",
          "docsTags": []
        },
        {
          "event": "aOnHideStart",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when the dropdown overlay is about to become hidden.",
          "docsTags": []
        },
        {
          "event": "aOnShow",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when the dropdown overlay becomes visible.",
          "docsTags": []
        },
        {
          "event": "aOnShowStart",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when the dropdown overlay is about to become visible.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "scroll",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "any-dropdown",
        "any-multiselect"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "any-dropdown": [
          "any-overlay"
        ],
        "any-multiselect": [
          "any-overlay"
        ]
      }
    },
    {
      "filePath": "src/components/radio-button/radio-button.tsx",
      "encapsulation": "shadow",
      "tag": "any-radio-button",
      "readme": "# any-radio-button\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyTabIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "any-tab-index",
          "reflectToAttr": false,
          "docs": "Index of the element in tabbing order",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Identifier of the focus input to match a label defined for the component.",
          "docsTags": [],
          "default": "`any-rb-${radiobuttonIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the radiobutton.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelStyleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label-style-class",
          "reflectToAttr": false,
          "docs": "Style class of the label.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Style class of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "the value of the radio.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(ev: any) => Promise<void>",
            "parameters": [
              {
                "name": "ev",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus(ev: any) => Promise<void>",
          "parameters": [
            {
              "name": "ev",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Applies focus.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "aOnBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when the radio button loses focus.",
          "docsTags": []
        },
        {
          "event": "aOnFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke when the radio button receives focus.",
          "docsTags": []
        },
        {
          "event": "aOnSelect",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke on radio button select.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/radio-group/radio-group.tsx",
      "encapsulation": "none",
      "tag": "any-radio-group",
      "readme": "# any-radio-group\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowEmptySelection",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allow-empty-selection",
          "reflectToAttr": false,
          "docs": "If `true`, the radios can be deselected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "the value of the radio group.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "RadioGroupChangeEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "RadioGroupChangeEventDetail",
            "resolved": "RadioGroupChangeEventDetail<any>",
            "references": {
              "RadioGroupChangeEventDetail": {
                "location": "import",
                "path": "./radio-group-inteface",
                "id": "src/components/radio-group/radio-group-inteface.ts::RadioGroupChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/ripple-effect/ripple-effect.tsx",
      "encapsulation": "shadow",
      "tag": "any-ripple-effect",
      "readme": "# any-ripple-effect\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"bounded\" | \"unbounded\"",
          "complexType": {
            "original": "\"bounded\" | \"unbounded\"",
            "resolved": "\"bounded\" | \"unbounded\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Sets the type of ripple-effect:",
          "docsTags": [],
          "default": "\"bounded\"",
          "values": [
            {
              "value": "bounded",
              "type": "string"
            },
            {
              "value": "unbounded",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "any-ink",
          "docs": ""
        }
      ],
      "dependents": [
        "any-button",
        "any-listbox",
        "any-tab-view"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "any-button": [
          "any-ripple-effect"
        ],
        "any-listbox": [
          "any-ripple-effect"
        ],
        "any-tab-view": [
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/tab-panel/tab-panel.tsx",
      "encapsulation": "shadow",
      "tag": "any-tab-panel",
      "readme": "# any-tab-panel\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, tab cannot be activated.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "Title of the tabPanel.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Defines if tab is active.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tab-view/tab-view.tsx",
      "encapsulation": "shadow",
      "tag": "any-tab-view",
      "readme": "# any-tab-view\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "active-index",
          "reflectToAttr": false,
          "docs": "Index of the active tab to change selected tab programmatically.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Style class of the component.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "any-ripple-effect"
      ],
      "dependencyGraph": {
        "any-tab-view": [
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/virtual-scroller/virtual-scroller.tsx",
      "encapsulation": "scoped",
      "tag": "any-virtual-scroller",
      "readme": "# any-virtual-scroller\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "anyStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "any-style",
          "reflectToAttr": false,
          "docs": "Inline style of the component",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contentElemClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "content-elem-class",
          "reflectToAttr": false,
          "docs": "Class name of the content element where items will be rendered",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contentElemTag",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "content-elem-tag",
          "reflectToAttr": false,
          "docs": "Tag name of content element whwre items will be rendered",
          "docsTags": [],
          "default": "\"div\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "delay",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "delay",
          "reflectToAttr": false,
          "docs": "Threshold in milliseconds to delay lazy loading during scrolling",
          "docsTags": [],
          "default": "250",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemElemClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "item-elem-class",
          "reflectToAttr": false,
          "docs": "Class name of the item element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "item-size",
          "reflectToAttr": false,
          "docs": "Height of an item in the list",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemTag",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "item-tag",
          "reflectToAttr": false,
          "docs": "Tag name for supporting elements: spacing extra rows,\r\nempty-data row. It will be determined by itself once data provided,\r\nso it's optional. But if your data is not provided during\r\ninitialization - it is better to specify this option because\r\notherwise plugin will be unable to correctly render empty-data row.",
          "docsTags": [],
          "default": "\"div\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "An array of objects to display",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "lazy",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "lazy",
          "reflectToAttr": false,
          "docs": "Defines if data is loaded and interacted with in lazy manner",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noDataText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "no-data-text",
          "reflectToAttr": false,
          "docs": "Text for placeholder element if there is no data provided",
          "docsTags": [],
          "default": "\"No Data\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rowsPerPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "rows-per-page",
          "reflectToAttr": false,
          "docs": "Number of rows to display per page",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollElemClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "scroll-elem-class",
          "reflectToAttr": false,
          "docs": "Class name of the scroll element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollerHeight",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "scroller-height",
          "reflectToAttr": false,
          "docs": "Max height of the content area in inline mode",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "style-class",
          "reflectToAttr": false,
          "docs": "Inline style of the component",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "aOnItemClick",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback when item is clicked",
          "docsTags": []
        },
        {
          "event": "aOnLazyLoad",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke in lazy mode to load new data",
          "docsTags": []
        },
        {
          "event": "clusterChanged",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Will be called right after replacing previous cluster with new one",
          "docsTags": []
        },
        {
          "event": "clusterWillChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Will be called right before replacing previous cluster with new one",
          "docsTags": []
        },
        {
          "event": "scrollingProgress",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Will be called on scrolling. Returns progress position",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "any-listbox"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "any-listbox": [
          "any-virtual-scroller"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/doc/app-code/app-code.tsx",
      "encapsulation": "scoped",
      "tag": "app-code",
      "readme": "# app-code\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "code",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "code",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "extFiles",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCodeSandbox",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-code-sandbox",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideStackBlitz",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-stack-blitz",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideToggleCode",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-toggle-code",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routeFiles",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selector",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selector",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "service",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "service",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "checkbox-basic",
        "checkbox-disabled",
        "checkbox-dynamic",
        "checkbox-group",
        "checkbox-label",
        "checkbox-readonly",
        "dropdown-basic",
        "dropdown-disabled",
        "dropdown-filter",
        "dropdown-template",
        "dropdown-virtual-scroll",
        "input-number-buttons",
        "input-number-currency",
        "input-number-disabled",
        "input-number-float-label",
        "input-number-locale",
        "input-number-numeral",
        "input-number-prefix-and-suffix",
        "input-number-vertical",
        "input-switch-basic",
        "input-switch-disabled",
        "input-switch-preselection",
        "input-text-basic",
        "input-text-disabled",
        "input-text-float-label",
        "input-text-icons",
        "input-textarea-auto-resize",
        "input-textarea-basic",
        "input-textarea-disabled",
        "input-textarea-float-label"
      ],
      "dependencies": [
        "any-button"
      ],
      "dependencyGraph": {
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "checkbox-basic": [
          "app-code"
        ],
        "checkbox-disabled": [
          "app-code"
        ],
        "checkbox-dynamic": [
          "app-code"
        ],
        "checkbox-group": [
          "app-code"
        ],
        "checkbox-label": [
          "app-code"
        ],
        "checkbox-readonly": [
          "app-code"
        ],
        "dropdown-basic": [
          "app-code"
        ],
        "dropdown-disabled": [
          "app-code"
        ],
        "dropdown-filter": [
          "app-code"
        ],
        "dropdown-template": [
          "app-code"
        ],
        "dropdown-virtual-scroll": [
          "app-code"
        ],
        "input-number-buttons": [
          "app-code"
        ],
        "input-number-currency": [
          "app-code"
        ],
        "input-number-disabled": [
          "app-code"
        ],
        "input-number-float-label": [
          "app-code"
        ],
        "input-number-locale": [
          "app-code"
        ],
        "input-number-numeral": [
          "app-code"
        ],
        "input-number-prefix-and-suffix": [
          "app-code"
        ],
        "input-number-vertical": [
          "app-code"
        ],
        "input-switch-basic": [
          "app-code"
        ],
        "input-switch-disabled": [
          "app-code"
        ],
        "input-switch-preselection": [
          "app-code"
        ],
        "input-text-basic": [
          "app-code"
        ],
        "input-text-disabled": [
          "app-code"
        ],
        "input-text-float-label": [
          "app-code"
        ],
        "input-text-icons": [
          "app-code"
        ],
        "input-textarea-auto-resize": [
          "app-code"
        ],
        "input-textarea-basic": [
          "app-code"
        ],
        "input-textarea-disabled": [
          "app-code"
        ],
        "input-textarea-float-label": [
          "app-code"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/config/app-config/app-config.tsx",
      "encapsulation": "scoped",
      "tag": "app-config",
      "readme": "# app-config\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "any-input-switch"
      ],
      "dependencyGraph": {
        "app-config": [
          "any-input-switch"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/doc/app-doc/app-doc.tsx",
      "encapsulation": "scoped",
      "tag": "app-doc",
      "readme": "# app-doc\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "apiDocs",
          "type": "string[]",
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "docTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "doc-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "docs",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "githubPage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "github-page",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "any-button",
        "app-docsection",
        "app-docsection-nav",
        "app-docapisection"
      ],
      "dependencyGraph": {
        "app-doc": [
          "any-button",
          "app-docsection",
          "app-docsection-nav",
          "app-docapisection"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "app-docapisection": [
          "app-docsection",
          "app-docsection-nav"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/doc/app-docapisection/app-docapisection.tsx",
      "encapsulation": "scoped",
      "tag": "app-docapisection",
      "readme": "# app-docapisection\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "docs",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "docs",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "app-doc"
      ],
      "dependencies": [
        "app-docsection",
        "app-docsection-nav"
      ],
      "dependencyGraph": {
        "app-docapisection": [
          "app-docsection",
          "app-docsection-nav"
        ],
        "app-doc": [
          "app-docapisection"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/doc/app-docapitable/app-docapitable.tsx",
      "encapsulation": "scoped",
      "tag": "app-docapitable",
      "readme": "# app-docapitable\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "anyId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "any-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "data",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isInterface",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-interface",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "level",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "level",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "parentDescription",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "parent-description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "parentId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "parent-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "parentTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "parent-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "relatedProp",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "related-prop",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "app-docapitable"
      ],
      "dependencies": [
        "app-docsectiontext",
        "app-docapitable"
      ],
      "dependencyGraph": {
        "app-docapitable": [
          "app-docapitable"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/doc/app-docsection/app-docsection.tsx",
      "encapsulation": "scoped",
      "tag": "app-docsection",
      "readme": "# app-docsection\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "apiDocs",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "docs",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "app-doc",
        "app-docapisection"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "app-doc": [
          "app-docsection"
        ],
        "app-docapisection": [
          "app-docsection"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/doc/app-docsection-nav/app-docsection-nav.tsx",
      "encapsulation": "scoped",
      "tag": "app-docsection-nav",
      "readme": "# app-docsection-nav\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "docs",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "scroll",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "app-doc",
        "app-docapisection"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "app-doc": [
          "app-docsection-nav"
        ],
        "app-docapisection": [
          "app-docsection-nav"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/doc/app-docsectiontext/app-docsectiontext.tsx",
      "encapsulation": "scoped",
      "tag": "app-docsectiontext",
      "readme": "# app-docsectiontext\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "level",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "level",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "parentDescription",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "parent-description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "parentId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "parent-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "parentTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "parent-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "app-docapitable",
        "checkbox-basic",
        "checkbox-disabled",
        "checkbox-dynamic",
        "checkbox-group",
        "checkbox-label",
        "checkbox-readonly",
        "dropdown-basic",
        "dropdown-disabled",
        "dropdown-filter",
        "dropdown-template",
        "dropdown-virtual-scroll",
        "input-number-buttons",
        "input-number-currency",
        "input-number-disabled",
        "input-number-float-label",
        "input-number-locale",
        "input-number-numeral",
        "input-number-prefix-and-suffix",
        "input-number-vertical",
        "input-switch-basic",
        "input-switch-disabled",
        "input-switch-preselection",
        "input-text-basic",
        "input-text-disabled",
        "input-text-float-label",
        "input-text-icons",
        "input-textarea-auto-resize",
        "input-textarea-basic",
        "input-textarea-disabled",
        "input-textarea-float-label"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "app-docapitable": [
          "app-docsectiontext"
        ],
        "checkbox-basic": [
          "app-docsectiontext"
        ],
        "checkbox-disabled": [
          "app-docsectiontext"
        ],
        "checkbox-dynamic": [
          "app-docsectiontext"
        ],
        "checkbox-group": [
          "app-docsectiontext"
        ],
        "checkbox-label": [
          "app-docsectiontext"
        ],
        "checkbox-readonly": [
          "app-docsectiontext"
        ],
        "dropdown-basic": [
          "app-docsectiontext"
        ],
        "dropdown-disabled": [
          "app-docsectiontext"
        ],
        "dropdown-filter": [
          "app-docsectiontext"
        ],
        "dropdown-template": [
          "app-docsectiontext"
        ],
        "dropdown-virtual-scroll": [
          "app-docsectiontext"
        ],
        "input-number-buttons": [
          "app-docsectiontext"
        ],
        "input-number-currency": [
          "app-docsectiontext"
        ],
        "input-number-disabled": [
          "app-docsectiontext"
        ],
        "input-number-float-label": [
          "app-docsectiontext"
        ],
        "input-number-locale": [
          "app-docsectiontext"
        ],
        "input-number-numeral": [
          "app-docsectiontext"
        ],
        "input-number-prefix-and-suffix": [
          "app-docsectiontext"
        ],
        "input-number-vertical": [
          "app-docsectiontext"
        ],
        "input-switch-basic": [
          "app-docsectiontext"
        ],
        "input-switch-disabled": [
          "app-docsectiontext"
        ],
        "input-switch-preselection": [
          "app-docsectiontext"
        ],
        "input-text-basic": [
          "app-docsectiontext"
        ],
        "input-text-disabled": [
          "app-docsectiontext"
        ],
        "input-text-float-label": [
          "app-docsectiontext"
        ],
        "input-text-icons": [
          "app-docsectiontext"
        ],
        "input-textarea-auto-resize": [
          "app-docsectiontext"
        ],
        "input-textarea-basic": [
          "app-docsectiontext"
        ],
        "input-textarea-disabled": [
          "app-docsectiontext"
        ],
        "input-textarea-float-label": [
          "app-docsectiontext"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/checkbox/checkbox-basic/checkbox-basic.tsx",
      "encapsulation": "scoped",
      "tag": "checkbox-basic",
      "readme": "# checkbox-basic\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-checkbox",
        "app-code"
      ],
      "dependencyGraph": {
        "checkbox-basic": [
          "app-docsectiontext",
          "any-checkbox",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/checkbox/checkbox-disabled/checkbox-disabled.tsx",
      "encapsulation": "scoped",
      "tag": "checkbox-disabled",
      "readme": "# checkbox-disabled\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-checkbox",
        "app-code"
      ],
      "dependencyGraph": {
        "checkbox-disabled": [
          "app-docsectiontext",
          "any-checkbox",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/checkbox/checkbox-dynamic/checkbox-dynamic.tsx",
      "encapsulation": "scoped",
      "tag": "checkbox-dynamic",
      "readme": "# checkbox-dynamic\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-checkbox",
        "app-code"
      ],
      "dependencyGraph": {
        "checkbox-dynamic": [
          "app-docsectiontext",
          "any-checkbox",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/checkbox/checkbox-group/checkbox-group.tsx",
      "encapsulation": "scoped",
      "tag": "checkbox-group",
      "readme": "# checkbox-group\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-checkbox",
        "app-code"
      ],
      "dependencyGraph": {
        "checkbox-group": [
          "app-docsectiontext",
          "any-checkbox",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/checkbox/checkbox-label/checkbox-label.tsx",
      "encapsulation": "scoped",
      "tag": "checkbox-label",
      "readme": "# checkbox-label\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-checkbox",
        "app-code"
      ],
      "dependencyGraph": {
        "checkbox-label": [
          "app-docsectiontext",
          "any-checkbox",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/checkbox/checkbox-readonly/checkbox-readonly.tsx",
      "encapsulation": "none",
      "tag": "checkbox-readonly",
      "readme": "# checkbox-readonly\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-checkbox",
        "app-code"
      ],
      "dependencyGraph": {
        "checkbox-readonly": [
          "app-docsectiontext",
          "any-checkbox",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/dropdown/dropdown-basic/dropdown-basic.tsx",
      "encapsulation": "scoped",
      "tag": "dropdown-basic",
      "readme": "# dropdown-basic\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-dropdown",
        "app-code"
      ],
      "dependencyGraph": {
        "dropdown-basic": [
          "app-docsectiontext",
          "any-dropdown",
          "app-code"
        ],
        "any-dropdown": [
          "any-overlay",
          "any-listbox"
        ],
        "any-listbox": [
          "any-checkbox",
          "any-input-text",
          "any-ripple-effect",
          "any-virtual-scroller"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/dropdown/dropdown-disabled/dropdown-disabled.tsx",
      "encapsulation": "scoped",
      "tag": "dropdown-disabled",
      "readme": "# dropdown-disabled\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-dropdown",
        "app-code"
      ],
      "dependencyGraph": {
        "dropdown-disabled": [
          "app-docsectiontext",
          "any-dropdown",
          "app-code"
        ],
        "any-dropdown": [
          "any-overlay",
          "any-listbox"
        ],
        "any-listbox": [
          "any-checkbox",
          "any-input-text",
          "any-ripple-effect",
          "any-virtual-scroller"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/dropdown/dropdown-filter/dropdown-filter.tsx",
      "encapsulation": "scoped",
      "tag": "dropdown-filter",
      "readme": "# dropdown-filter\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-dropdown",
        "app-code"
      ],
      "dependencyGraph": {
        "dropdown-filter": [
          "app-docsectiontext",
          "any-dropdown",
          "app-code"
        ],
        "any-dropdown": [
          "any-overlay",
          "any-listbox"
        ],
        "any-listbox": [
          "any-checkbox",
          "any-input-text",
          "any-ripple-effect",
          "any-virtual-scroller"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/dropdown/dropdown-template/dropdown-template.tsx",
      "encapsulation": "scoped",
      "tag": "dropdown-template",
      "readme": "# dropdown-template\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "flag-#=item.value.countrycode#",
          "docs": ""
        }
      ],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-dropdown",
        "app-code"
      ],
      "dependencyGraph": {
        "dropdown-template": [
          "app-docsectiontext",
          "any-dropdown",
          "app-code"
        ],
        "any-dropdown": [
          "any-overlay",
          "any-listbox"
        ],
        "any-listbox": [
          "any-checkbox",
          "any-input-text",
          "any-ripple-effect",
          "any-virtual-scroller"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/dropdown/dropdown-virtual-scroll/dropdown-virtual-scroll.tsx",
      "encapsulation": "scoped",
      "tag": "dropdown-virtual-scroll",
      "readme": "# dropdown-virtual-scroll\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-dropdown",
        "app-code"
      ],
      "dependencyGraph": {
        "dropdown-virtual-scroll": [
          "app-docsectiontext",
          "any-dropdown",
          "app-code"
        ],
        "any-dropdown": [
          "any-overlay",
          "any-listbox"
        ],
        "any-listbox": [
          "any-checkbox",
          "any-input-text",
          "any-ripple-effect",
          "any-virtual-scroller"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-number/input-number-buttons/input-number-buttons.tsx",
      "encapsulation": "scoped",
      "tag": "input-number-buttons",
      "readme": "# input-number-buttons\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-number",
        "app-code"
      ],
      "dependencyGraph": {
        "input-number-buttons": [
          "app-docsectiontext",
          "any-input-number",
          "app-code"
        ],
        "any-input-number": [
          "any-input-text",
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "app-code": [
          "any-button"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-number/input-number-currency/input-number-currency.tsx",
      "encapsulation": "scoped",
      "tag": "input-number-currency",
      "readme": "# input-number-currency\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-number",
        "app-code"
      ],
      "dependencyGraph": {
        "input-number-currency": [
          "app-docsectiontext",
          "any-input-number",
          "app-code"
        ],
        "any-input-number": [
          "any-input-text",
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "app-code": [
          "any-button"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-number/input-number-disabled/input-number-disabled.tsx",
      "encapsulation": "scoped",
      "tag": "input-number-disabled",
      "readme": "# input-number-disabled\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-number",
        "app-code"
      ],
      "dependencyGraph": {
        "input-number-disabled": [
          "app-docsectiontext",
          "any-input-number",
          "app-code"
        ],
        "any-input-number": [
          "any-input-text",
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "app-code": [
          "any-button"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-number/input-number-float-label/input-number-float-label.tsx",
      "encapsulation": "scoped",
      "tag": "input-number-float-label",
      "readme": "# input-number-float-label\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-number",
        "app-code"
      ],
      "dependencyGraph": {
        "input-number-float-label": [
          "app-docsectiontext",
          "any-input-number",
          "app-code"
        ],
        "any-input-number": [
          "any-input-text",
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "app-code": [
          "any-button"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-number/input-number-locale/input-number-locale.tsx",
      "encapsulation": "scoped",
      "tag": "input-number-locale",
      "readme": "# input-number-locale\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-number",
        "app-code"
      ],
      "dependencyGraph": {
        "input-number-locale": [
          "app-docsectiontext",
          "any-input-number",
          "app-code"
        ],
        "any-input-number": [
          "any-input-text",
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "app-code": [
          "any-button"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-number/input-number-numeral/input-number-numeral.tsx",
      "encapsulation": "scoped",
      "tag": "input-number-numeral",
      "readme": "# input-number-numeral\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-number",
        "app-code"
      ],
      "dependencyGraph": {
        "input-number-numeral": [
          "app-docsectiontext",
          "any-input-number",
          "app-code"
        ],
        "any-input-number": [
          "any-input-text",
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "app-code": [
          "any-button"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-number/input-number-prefix-and-suffix/input-number-prefix-and-suffix.tsx",
      "encapsulation": "scoped",
      "tag": "input-number-prefix-and-suffix",
      "readme": "# input-number-prefix-and-suffix\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-number",
        "app-code"
      ],
      "dependencyGraph": {
        "input-number-prefix-and-suffix": [
          "app-docsectiontext",
          "any-input-number",
          "app-code"
        ],
        "any-input-number": [
          "any-input-text",
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "app-code": [
          "any-button"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-number/input-number-vertical/input-number-vertical.tsx",
      "encapsulation": "scoped",
      "tag": "input-number-vertical",
      "readme": "# input-number-vertical\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-number",
        "app-code"
      ],
      "dependencyGraph": {
        "input-number-vertical": [
          "app-docsectiontext",
          "any-input-number",
          "app-code"
        ],
        "any-input-number": [
          "any-input-text",
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ],
        "app-code": [
          "any-button"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-switch/input-switch-basic/input-switch-basic.tsx",
      "encapsulation": "scoped",
      "tag": "input-switch-basic",
      "readme": "# input-switch-basic\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-switch",
        "app-code"
      ],
      "dependencyGraph": {
        "input-switch-basic": [
          "app-docsectiontext",
          "any-input-switch",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-switch/input-switch-disabled/input-switch-disabled.tsx",
      "encapsulation": "scoped",
      "tag": "input-switch-disabled",
      "readme": "# input-switch-disabled\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-switch",
        "app-code"
      ],
      "dependencyGraph": {
        "input-switch-disabled": [
          "app-docsectiontext",
          "any-input-switch",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-switch/input-switch-preselection/input-switch-preselection.tsx",
      "encapsulation": "scoped",
      "tag": "input-switch-preselection",
      "readme": "# input-switch-preselection\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-switch",
        "app-code"
      ],
      "dependencyGraph": {
        "input-switch-preselection": [
          "app-docsectiontext",
          "any-input-switch",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-text/input-text-basic/input-text-basic.tsx",
      "encapsulation": "scoped",
      "tag": "input-text-basic",
      "readme": "# input-text-basic\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-text",
        "app-code"
      ],
      "dependencyGraph": {
        "input-text-basic": [
          "app-docsectiontext",
          "any-input-text",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-text/input-text-disabled/input-text-disabled.tsx",
      "encapsulation": "scoped",
      "tag": "input-text-disabled",
      "readme": "# input-text-disabled\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-text",
        "app-code"
      ],
      "dependencyGraph": {
        "input-text-disabled": [
          "app-docsectiontext",
          "any-input-text",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-text/input-text-float-label/input-text-float-label.tsx",
      "encapsulation": "scoped",
      "tag": "input-text-float-label",
      "readme": "# input-text-float-label\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-text",
        "app-code"
      ],
      "dependencyGraph": {
        "input-text-float-label": [
          "app-docsectiontext",
          "any-input-text",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-text/input-text-icons/input-text-icons.tsx",
      "encapsulation": "scoped",
      "tag": "input-text-icons",
      "readme": "# input-text-icons\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-text",
        "app-code"
      ],
      "dependencyGraph": {
        "input-text-icons": [
          "app-docsectiontext",
          "any-input-text",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-textarea/input-textarea-auto-resize/input-textarea-auto-resize.tsx",
      "encapsulation": "scoped",
      "tag": "input-textarea-auto-resize",
      "readme": "# input-textarea-auto-resize\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-textarea",
        "app-code"
      ],
      "dependencyGraph": {
        "input-textarea-auto-resize": [
          "app-docsectiontext",
          "any-input-textarea",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-textarea/input-textarea-basic/input-textarea-basic.tsx",
      "encapsulation": "scoped",
      "tag": "input-textarea-basic",
      "readme": "# input-textarea-basic\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-textarea",
        "app-code"
      ],
      "dependencyGraph": {
        "input-textarea-basic": [
          "app-docsectiontext",
          "any-input-textarea",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-textarea/input-textarea-disabled/input-textarea-disabled.tsx",
      "encapsulation": "scoped",
      "tag": "input-textarea-disabled",
      "readme": "# input-textarea-disabled\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-textarea",
        "app-code"
      ],
      "dependencyGraph": {
        "input-textarea-disabled": [
          "app-docsectiontext",
          "any-input-textarea",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/app-showcase/pages/input-textarea/input-textarea-float-label/input-textarea-float-label.tsx",
      "encapsulation": "scoped",
      "tag": "input-textarea-float-label",
      "readme": "# input-textarea-float-label\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "app-docsectiontext",
        "any-input-textarea",
        "app-code"
      ],
      "dependencyGraph": {
        "input-textarea-float-label": [
          "app-docsectiontext",
          "any-input-textarea",
          "app-code"
        ],
        "app-code": [
          "any-button"
        ],
        "any-button": [
          "any-badge",
          "any-ripple-effect"
        ]
      }
    }
  ],
  "typeLibrary": {
    "src/components/input-textarea/input-textarea-interface.ts::TextareaChangeEventDetail": {
      "declaration": "export interface TextareaChangeEventDetail {\r\n  value?: string | null;\r\n}",
      "docstring": "",
      "path": "src/components/input-textarea/input-textarea-interface.ts"
    },
    "src/components/listbox/listbox-interface.ts::SelectChangeEventDetail": {
      "declaration": "export interface SelectChangeEventDetail<T = any> {\r\n    originalEvent: T;\r\n    value: T;\r\n}",
      "docstring": "",
      "path": "src/components/listbox/listbox-interface.ts"
    },
    "src/components/radio-group/radio-group-inteface.ts::RadioGroupChangeEventDetail": {
      "declaration": "export interface RadioGroupChangeEventDetail<T = any> {\r\n  value: T;\r\n}",
      "docstring": "",
      "path": "src/components/radio-group/radio-group-inteface.ts"
    }
  }
}