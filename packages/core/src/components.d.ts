/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { RadioGroupChangeEventDetail, SelectChangeEventDetail, TextareaChangeEventDetail } from "./interfaces";
export namespace Components {
    interface AnyBadge {
        /**
          * Inline style of the component.
         */
        "anyStyle": any;
        /**
          * Severity type of the badge.
         */
        "severity": string;
        /**
          * Size of the badge, valid options are "large" and "xlarge".
         */
        "size": string;
        /**
          * Style class of the component.
         */
        "styleClass": string;
        /**
          * Value to display inside the badge.
         */
        "value": string;
    }
    interface AnyBadgeOverlay {
        /**
          * Style class of the component.
         */
        "styleClass": string;
    }
    interface AnyButton {
        /**
          * Inline style of the element.
         */
        "anyStyle"?: any;
        /**
          * Value of the badge.
         */
        "badge": string;
        /**
          * Style class of the badge.
         */
        "badgeClass": string;
        /**
          * When present, it specifies that the component should be disabled.
         */
        "disabled": boolean;
        "getButtonRef": () => Promise<HTMLButtonElement>;
        /**
          * Name of the icon.
         */
        "icon": string;
        /**
          * Height of the icon
         */
        "iconHeight": number;
        /**
          * Position of the icon, valid values are "left" and "right".
         */
        "iconPos": "left" | "right" | "top" | "bottom";
        /**
          * Width of the icon
         */
        "iconWidth": number;
        /**
          * Text of the button.
         */
        "label": string;
        /**
          * Whether the button is in loading state.
         */
        "loading": boolean;
        /**
          * Icon to display in loading state.
         */
        "loadingIcon": string;
        /**
          * Style class of the icon element
         */
        "loadingIconStyleClass": string;
        /**
          * Style class of the element.
         */
        "styleClass": string;
        /**
          * Type of the button.
         */
        "type": "button" | "submit" | "reset";
    }
    interface AnyCheckbox {
        /**
          * Inline style of the component.
         */
        "anyStyle": any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex"?: number;
        /**
          * Allows to select a boolean value instead of multiple values.
         */
        "binary": boolean;
        /**
          * Icon class of the checkbox icon.
         */
        "checkboxIcon": string;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled": boolean;
        "inputFocus": () => Promise<void>;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * Label of the checkbox.
         */
        "label": string;
        /**
          * Style class of the label.
         */
        "labelStyleClass": string;
        /**
          * Name of the checkbox group.
         */
        "name": string;
        /**
          * When present, it specifies that the component cannot be edited.
         */
        "readonly": boolean;
        /**
          * Style class of the component.
         */
        "styleClass": any;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value": any;
    }
    interface AnyDropdown {
        /**
          * Inline style of the element
         */
        "anyStyle"?: any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex"?: number;
        /**
          * Whether to automatically manage layering
         */
        "autoZIndex"?: boolean;
        /**
          * Base zIndex value to use in layering
         */
        "baseZIndex"?: string;
        /**
          * Icon class of the dropdown clear icon
         */
        "clearIcon"?: string;
        /**
          * When present, it specifies that the element should be disabled
         */
        "disabled": boolean;
        /**
          * Icon class of the dropdown icon
         */
        "dropdownIcon"?: string;
        /**
          * Transition options of the hide animation
         */
        "hideAnimation"?: string;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * Name of the dropdown input.
         */
        "name": string;
        /**
          * Name of the label field of an option
         */
        "optionLabel": string;
        /**
          * Name of the value field of an option
         */
        "optionValue": string;
        /**
          * An array of objects to display as the available options.
         */
        "options": any[];
        /**
          * Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value
         */
        "panelScrollHeight"?: string;
        /**
          * Default text to display when no option is selected
         */
        "placeholder"?: string;
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly": boolean;
        /**
          * Keyframe name the show animation
         */
        "showAnimation"?: string;
        /**
          * When enabled, a clear icon is displayed to clear the value
         */
        "showClear"?: boolean;
        /**
          * Value of the dropdown list
         */
        "value"?: any;
        /**
          * When present, list virtual scroller is enabled
         */
        "virtualScroll": boolean;
    }
    interface AnyInputNumber {
        /**
          * Text to display before the value.
         */
        "aPrefix": string;
        /**
          * Text to display after the value.
         */
        "aSuffix": string;
        /**
          * Title text of the input text.
         */
        "aTitle": string;
        /**
          * Determines whether the input field is empty.
         */
        "allowEmpty": boolean;
        /**
          * Used to indicate that user input is required on an element before a form can be submitted.
         */
        "anyAriaRequired": boolean;
        /**
          * Inline style of the component.
         */
        "anyStyle": any;
        /**
          * Specifies tab order of the element.
         */
        "anyTabIndex": string;
        /**
          * Used to define a string that autocomplete attribute the current element.
         */
        "autocomplete": string;
        /**
          * Layout of the buttons, valid values are "stacked" (default), "horizontal" and "vertical".
         */
        "buttonLayout": string;
        /**
          * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes(https://www.currency-iso.org/en/home/tables/table-a1.html), such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB. There is no default value; if the style is "currency", the currency property must be provided.
         */
        "currency": string;
        /**
          * How to display the currency in currency formatting. Possible values are "symbol" to use a localized currency symbol such as €, ü"code" to use the ISO currency code, "name" to use a localized currency name such as "dollar"; the default is "symbol".
         */
        "currencyDisplay": string;
        /**
          * Style class of the decrement button.
         */
        "decrementButtonClass": string;
        /**
          * Style class of the decrement button.
         */
        "decrementButtonIcon": string;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled": boolean;
        /**
          * Whether to format the value.
         */
        "format": boolean;
        /**
          * Style class of the increment button.
         */
        "incrementButtonClass": string;
        /**
          * Style class of the increment button.
         */
        "incrementButtonIcon": string;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * Inline style of the input field.
         */
        "inputStyle": any;
        /**
          * Style class of the input field.
         */
        "inputStyleClass": string;
        /**
          * The class of input wrapper element
         */
        "inputWrapperClass": string;
        /**
          * Label of the component
         */
        "label": string;
        /**
          * Locale to be used in formatting.
         */
        "locale": string;
        /**
          * The locale matching algorithm to use. Possible values are "lookup" and "best fit"; the default is "best fit". See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation for details.
         */
        "localeMatcher": string;
        /**
          * Maximum boundary value.
         */
        "max": number;
        /**
          * The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the ISO 4217 currency code list (https://www.currency-iso.org/en/home/tables/table-a1.html) (2 if the list doesn't provide that information).
         */
        "maxFractionDigits": number;
        /**
          * Maximum number of character allows in the input field.
         */
        "maxlength": number;
        /**
          * Mininum boundary value.
         */
        "min": number;
        /**
          * The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the ISO 4217 currency code list (https://www.currency-iso.org/en/home/tables/table-a1.html) (2 if the list doesn't provide that information).
         */
        "minFractionDigits": number;
        /**
          * Defines the behavior of the component, valid values are "decimal" and "currency".
         */
        "mode": string;
        /**
          * Name of the component
         */
        "name": string;
        /**
          * Advisory information to display on input.
         */
        "placeholder": string;
        /**
          * When present, it specifies that an input field is read-only.
         */
        "readonly": boolean;
        /**
          * When present, it specifies that an input field is required.
         */
        "required": boolean;
        /**
          * Displays spinner buttons.
         */
        "showButtons": boolean;
        /**
          * Size of the input field.
         */
        "size": number;
        /**
          * Step factor to increment/decrement the value.
         */
        "step": number;
        /**
          * Style class of the component.
         */
        "styleClass": string;
        /**
          * Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
         */
        "useGrouping": boolean;
        /**
          * Value of the component.
         */
        "value": string;
    }
    interface AnyInputSwitch {
        /**
          * Inline style of the component.
         */
        "anyStyle": any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex"?: number;
        /**
          * Establishes relationships between the component and label(s) where its value should be one or more element IDs.
         */
        "ariaLabeledBy"?: string;
        /**
          * If `true`, the input-switch is selected.
         */
        "checked": boolean;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled": boolean;
        /**
          * Value in unchecked state.
         */
        "falseValue": any;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * Name of the checkbox group.
         */
        "name": string;
        /**
          * When present, it specifies that the component cannot be edited.
         */
        "readonly": boolean;
        /**
          * Style class of the component.
         */
        "styleClass": any;
        /**
          * Value in checked state.
         */
        "trueValue": any;
    }
    interface AnyInputText {
        /**
          * Title text of the input text.
         */
        "aTitle": string;
        /**
          * Used to indicate that user input is required on an element before a form can be submitted.
         */
        "anyAriaRequired": boolean;
        /**
          * Specifies tab order of the element.
         */
        "anyTabIndex": string;
        /**
          * Used to define a string that autocomplete attribute the current element.
         */
        "autocomplete": string;
        /**
          * When present, it specifies that the element should be disabled
         */
        "disabled": boolean;
        /**
          * When enabled, the label will have floating effect on input text focus
         */
        "floatLabel": boolean;
        "getInputRef": () => Promise<HTMLInputElement>;
        /**
          * Inline style of the element
         */
        "inputClass"?: string;
        /**
          * The class of input holder element
         */
        "inputHolderClass": string;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * Inline style of the element
         */
        "inputStyle"?: any;
        /**
          * The class of input wrapper element
         */
        "inputWrapperClass": string;
        /**
          * Label of the input text
         */
        "label": string;
        /**
          * The class of left icon wrapper element
         */
        "leftIconClass": string;
        /**
          * Maximum number of character allows in the input field.
         */
        "maxlength": number;
        /**
          * Name of the input text.
         */
        "name": string;
        /**
          * Default text to display when no value in input text
         */
        "placeholder": string;
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly": boolean;
        /**
          * When present, it specifies that an input field is required.
         */
        "required": boolean;
        /**
          * The class of right icon wrapper element
         */
        "rightIconClass": string;
        /**
          * Size of the input field.
         */
        "size": number;
        /**
          * Value of the input text
         */
        "value": string;
    }
    interface AnyInputTextarea {
        /**
          * When present, textarea size changes as being typed.
         */
        "autoResize": boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize": string;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled": boolean;
        /**
          * When enabled, the label will have floating effect on input text focus
         */
        "floatLabel": boolean;
        /**
          * Returns the native `<textarea>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLTextAreaElement>;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * The class of input wrapper element
         */
        "inputWrapperClass": string;
        /**
          * Label of the input text
         */
        "label": string;
        /**
          * Name of the input text.
         */
        "name": string;
        /**
          * Default text to display when no value in input textarea
         */
        "placeholder": string;
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly": boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * Sets blur on the native `textarea` in `ion-textarea`. Use this method instead of the global `textarea.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * The value of the textarea.
         */
        "value"?: string | null;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: "hard" | "soft" | "off";
    }
    interface AnyListbox {
        /**
          * Inline style of the element
         */
        "anyStyle": any;
        /**
          * When present, it specifies that the element should be disabled
         */
        "disabled": boolean;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * Inline style of the list element
         */
        "listStyle": any;
        /**
          * Name of the dropdown input.
         */
        "name": string;
        /**
          * Name of the label field of an option
         */
        "optionLabel": string;
        /**
          * Name of the value field of an option
         */
        "optionValue": string;
        /**
          * An array of objects to display as the available options.
         */
        "options": any[];
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly": boolean;
        /**
          * Max height of the content area in inline mode
         */
        "scrollerHeight": string;
        /**
          * Value of the listbox
         */
        "value"?: any;
        /**
          * When present, list virtual scroller is enabled
         */
        "virtualScroll": boolean;
    }
    interface AnyRadioButton {
        /**
          * Inline style of the component.
         */
        "anyStyle": any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex"?: number;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled": boolean;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * Label of the radiobutton.
         */
        "label": string;
        /**
          * Style class of the label.
         */
        "labelStyleClass": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Applies focus.
         */
        "setFocus": (ev: any) => Promise<void>;
        /**
          * Style class of the component.
         */
        "styleClass": any;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface AnyRadioGroup {
        /**
          * If `true`, the radios can be deselected.
         */
        "allowEmptySelection": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface AnyRippleEffect {
        /**
          * Sets the type of ripple-effect:
         */
        "type": "bounded" | "unbounded";
    }
    interface AnyTabPanel {
        /**
          * When true, tab cannot be activated.
         */
        "disabled": boolean;
        /**
          * Title of the tabPanel.
         */
        "header": string;
        /**
          * Defines if tab is active.
         */
        "selected": boolean;
    }
    interface AnyTabView {
        /**
          * Index of the active tab to change selected tab programmatically.
         */
        "activeIndex": number;
        /**
          * Inline style of the component.
         */
        "anyStyle": any;
        /**
          * Style class of the component.
         */
        "styleClass": string;
    }
    interface AnyVirtualScroller {
        /**
          * Inline style of the component
         */
        "anyStyle": any;
        /**
          * Class name of the content element where items will be rendered
         */
        "contentElemClass": string;
        /**
          * Tag name of content element whwre items will be rendered
         */
        "contentElemTag": string;
        /**
          * Threshold in milliseconds to delay lazy loading during scrolling
         */
        "delay": number;
        /**
          * Class name of the item element
         */
        "itemElemClass": string;
        /**
          * Height of an item in the list
         */
        "itemSize": number;
        /**
          * Tag name for supporting elements: spacing extra rows, empty-data row. It will be determined by itself once data provided, so it's optional. But if your data is not provided during initialization - it is better to specify this option because otherwise plugin will be unable to correctly render empty-data row.
         */
        "itemTag": string;
        /**
          * An array of objects to display
         */
        "items": any[];
        /**
          * Defines if data is loaded and interacted with in lazy manner
         */
        "lazy": boolean;
        /**
          * Text for placeholder element if there is no data provided
         */
        "noDataText": string;
        /**
          * Number of rows to display per page
         */
        "rowsPerPage": number;
        /**
          * Class name of the scroll element
         */
        "scrollElemClass": string;
        /**
          * Max height of the content area in inline mode
         */
        "scrollerHeight": any;
        /**
          * Inline style of the component
         */
        "styleClass": string;
    }
}
export interface AnyButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnyButtonElement;
}
export interface AnyCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnyCheckboxElement;
}
export interface AnyDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnyDropdownElement;
}
export interface AnyInputNumberCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnyInputNumberElement;
}
export interface AnyInputSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnyInputSwitchElement;
}
export interface AnyInputTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnyInputTextElement;
}
export interface AnyInputTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnyInputTextareaElement;
}
export interface AnyListboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnyListboxElement;
}
export interface AnyRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnyRadioButtonElement;
}
export interface AnyRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnyRadioGroupElement;
}
export interface AnyVirtualScrollerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnyVirtualScrollerElement;
}
declare global {
    interface HTMLAnyBadgeElement extends Components.AnyBadge, HTMLStencilElement {
    }
    var HTMLAnyBadgeElement: {
        prototype: HTMLAnyBadgeElement;
        new (): HTMLAnyBadgeElement;
    };
    interface HTMLAnyBadgeOverlayElement extends Components.AnyBadgeOverlay, HTMLStencilElement {
    }
    var HTMLAnyBadgeOverlayElement: {
        prototype: HTMLAnyBadgeOverlayElement;
        new (): HTMLAnyBadgeOverlayElement;
    };
    interface HTMLAnyButtonElement extends Components.AnyButton, HTMLStencilElement {
    }
    var HTMLAnyButtonElement: {
        prototype: HTMLAnyButtonElement;
        new (): HTMLAnyButtonElement;
    };
    interface HTMLAnyCheckboxElement extends Components.AnyCheckbox, HTMLStencilElement {
    }
    var HTMLAnyCheckboxElement: {
        prototype: HTMLAnyCheckboxElement;
        new (): HTMLAnyCheckboxElement;
    };
    interface HTMLAnyDropdownElement extends Components.AnyDropdown, HTMLStencilElement {
    }
    var HTMLAnyDropdownElement: {
        prototype: HTMLAnyDropdownElement;
        new (): HTMLAnyDropdownElement;
    };
    interface HTMLAnyInputNumberElement extends Components.AnyInputNumber, HTMLStencilElement {
    }
    var HTMLAnyInputNumberElement: {
        prototype: HTMLAnyInputNumberElement;
        new (): HTMLAnyInputNumberElement;
    };
    interface HTMLAnyInputSwitchElement extends Components.AnyInputSwitch, HTMLStencilElement {
    }
    var HTMLAnyInputSwitchElement: {
        prototype: HTMLAnyInputSwitchElement;
        new (): HTMLAnyInputSwitchElement;
    };
    interface HTMLAnyInputTextElement extends Components.AnyInputText, HTMLStencilElement {
    }
    var HTMLAnyInputTextElement: {
        prototype: HTMLAnyInputTextElement;
        new (): HTMLAnyInputTextElement;
    };
    interface HTMLAnyInputTextareaElement extends Components.AnyInputTextarea, HTMLStencilElement {
    }
    var HTMLAnyInputTextareaElement: {
        prototype: HTMLAnyInputTextareaElement;
        new (): HTMLAnyInputTextareaElement;
    };
    interface HTMLAnyListboxElement extends Components.AnyListbox, HTMLStencilElement {
    }
    var HTMLAnyListboxElement: {
        prototype: HTMLAnyListboxElement;
        new (): HTMLAnyListboxElement;
    };
    interface HTMLAnyRadioButtonElement extends Components.AnyRadioButton, HTMLStencilElement {
    }
    var HTMLAnyRadioButtonElement: {
        prototype: HTMLAnyRadioButtonElement;
        new (): HTMLAnyRadioButtonElement;
    };
    interface HTMLAnyRadioGroupElement extends Components.AnyRadioGroup, HTMLStencilElement {
    }
    var HTMLAnyRadioGroupElement: {
        prototype: HTMLAnyRadioGroupElement;
        new (): HTMLAnyRadioGroupElement;
    };
    interface HTMLAnyRippleEffectElement extends Components.AnyRippleEffect, HTMLStencilElement {
    }
    var HTMLAnyRippleEffectElement: {
        prototype: HTMLAnyRippleEffectElement;
        new (): HTMLAnyRippleEffectElement;
    };
    interface HTMLAnyTabPanelElement extends Components.AnyTabPanel, HTMLStencilElement {
    }
    var HTMLAnyTabPanelElement: {
        prototype: HTMLAnyTabPanelElement;
        new (): HTMLAnyTabPanelElement;
    };
    interface HTMLAnyTabViewElement extends Components.AnyTabView, HTMLStencilElement {
    }
    var HTMLAnyTabViewElement: {
        prototype: HTMLAnyTabViewElement;
        new (): HTMLAnyTabViewElement;
    };
    interface HTMLAnyVirtualScrollerElement extends Components.AnyVirtualScroller, HTMLStencilElement {
    }
    var HTMLAnyVirtualScrollerElement: {
        prototype: HTMLAnyVirtualScrollerElement;
        new (): HTMLAnyVirtualScrollerElement;
    };
    interface HTMLElementTagNameMap {
        "any-badge": HTMLAnyBadgeElement;
        "any-badge-overlay": HTMLAnyBadgeOverlayElement;
        "any-button": HTMLAnyButtonElement;
        "any-checkbox": HTMLAnyCheckboxElement;
        "any-dropdown": HTMLAnyDropdownElement;
        "any-input-number": HTMLAnyInputNumberElement;
        "any-input-switch": HTMLAnyInputSwitchElement;
        "any-input-text": HTMLAnyInputTextElement;
        "any-input-textarea": HTMLAnyInputTextareaElement;
        "any-listbox": HTMLAnyListboxElement;
        "any-radio-button": HTMLAnyRadioButtonElement;
        "any-radio-group": HTMLAnyRadioGroupElement;
        "any-ripple-effect": HTMLAnyRippleEffectElement;
        "any-tab-panel": HTMLAnyTabPanelElement;
        "any-tab-view": HTMLAnyTabViewElement;
        "any-virtual-scroller": HTMLAnyVirtualScrollerElement;
    }
}
declare namespace LocalJSX {
    interface AnyBadge {
        /**
          * Inline style of the component.
         */
        "anyStyle"?: any;
        /**
          * Severity type of the badge.
         */
        "severity"?: string;
        /**
          * Size of the badge, valid options are "large" and "xlarge".
         */
        "size"?: string;
        /**
          * Style class of the component.
         */
        "styleClass"?: string;
        /**
          * Value to display inside the badge.
         */
        "value"?: string;
    }
    interface AnyBadgeOverlay {
        /**
          * Style class of the component.
         */
        "styleClass"?: string;
    }
    interface AnyButton {
        /**
          * Inline style of the element.
         */
        "anyStyle"?: any;
        /**
          * Value of the badge.
         */
        "badge"?: string;
        /**
          * Style class of the badge.
         */
        "badgeClass"?: string;
        /**
          * When present, it specifies that the component should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Name of the icon.
         */
        "icon"?: string;
        /**
          * Height of the icon
         */
        "iconHeight"?: number;
        /**
          * Position of the icon, valid values are "left" and "right".
         */
        "iconPos"?: "left" | "right" | "top" | "bottom";
        /**
          * Width of the icon
         */
        "iconWidth"?: number;
        /**
          * Text of the button.
         */
        "label"?: string;
        /**
          * Whether the button is in loading state.
         */
        "loading"?: boolean;
        /**
          * Icon to display in loading state.
         */
        "loadingIcon"?: string;
        /**
          * Style class of the icon element
         */
        "loadingIconStyleClass"?: string;
        /**
          * Callback to execute when button loses focus.
         */
        "onAOnBlur"?: (event: AnyButtonCustomEvent<any>) => void;
        /**
          * Callback to execute when button is clicked.
         */
        "onAOnClick"?: (event: AnyButtonCustomEvent<any>) => void;
        /**
          * Callback to execute when button is focused.
         */
        "onAOnFocus"?: (event: AnyButtonCustomEvent<any>) => void;
        /**
          * Style class of the element.
         */
        "styleClass"?: string;
        /**
          * Type of the button.
         */
        "type"?: "button" | "submit" | "reset";
    }
    interface AnyCheckbox {
        /**
          * Inline style of the component.
         */
        "anyStyle"?: any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex"?: number;
        /**
          * Allows to select a boolean value instead of multiple values.
         */
        "binary"?: boolean;
        /**
          * Icon class of the checkbox icon.
         */
        "checkboxIcon"?: string;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * Label of the checkbox.
         */
        "label"?: string;
        /**
          * Style class of the label.
         */
        "labelStyleClass"?: string;
        /**
          * Name of the checkbox group.
         */
        "name"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onAOnBlur"?: (event: AnyCheckboxCustomEvent<any>) => void;
        /**
          * Emitted when the toggle has focus.
         */
        "onAOnFocus"?: (event: AnyCheckboxCustomEvent<any>) => void;
        /**
          * Callback to invoke when value of dropdown changes.
         */
        "onValueChange"?: (event: AnyCheckboxCustomEvent<any>) => void;
        /**
          * When present, it specifies that the component cannot be edited.
         */
        "readonly"?: boolean;
        /**
          * Style class of the component.
         */
        "styleClass"?: any;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value"?: any;
    }
    interface AnyDropdown {
        /**
          * Inline style of the element
         */
        "anyStyle"?: any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex"?: number;
        /**
          * Whether to automatically manage layering
         */
        "autoZIndex"?: boolean;
        /**
          * Base zIndex value to use in layering
         */
        "baseZIndex"?: string;
        /**
          * Icon class of the dropdown clear icon
         */
        "clearIcon"?: string;
        /**
          * When present, it specifies that the element should be disabled
         */
        "disabled"?: boolean;
        /**
          * Icon class of the dropdown icon
         */
        "dropdownIcon"?: string;
        /**
          * Transition options of the hide animation
         */
        "hideAnimation"?: string;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * Name of the dropdown input.
         */
        "name"?: string;
        /**
          * Callback to invoke when dropdown loses focus
         */
        "onAOnBlur"?: (event: AnyDropdownCustomEvent<any>) => void;
        /**
          * Callback to invoke when component is clicked
         */
        "onAOnClick"?: (event: AnyDropdownCustomEvent<any>) => void;
        /**
          * Callback to invoke when dropdown gets focus
         */
        "onAOnFocus"?: (event: AnyDropdownCustomEvent<any>) => void;
        /**
          * Callback to invoke when dropdown overlay gets hidden
         */
        "onAOnHide"?: (event: AnyDropdownCustomEvent<any>) => void;
        /**
          * Callback to invoke when dropdown overlay before gets hidden
         */
        "onAOnHideStart"?: (event: AnyDropdownCustomEvent<any>) => void;
        /**
          * Callback to invoke when dropdown overlay gets visible
         */
        "onAOnShow"?: (event: AnyDropdownCustomEvent<any>) => void;
        /**
          * Callback to invoke when dropdown overlay before gets visible
         */
        "onAOnShowStart"?: (event: AnyDropdownCustomEvent<any>) => void;
        /**
          * Callback to invoke when value of dropdown changes
         */
        "onValueChange"?: (event: AnyDropdownCustomEvent<any>) => void;
        /**
          * Name of the label field of an option
         */
        "optionLabel"?: string;
        /**
          * Name of the value field of an option
         */
        "optionValue"?: string;
        /**
          * An array of objects to display as the available options.
         */
        "options"?: any[];
        /**
          * Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value
         */
        "panelScrollHeight"?: string;
        /**
          * Default text to display when no option is selected
         */
        "placeholder"?: string;
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly"?: boolean;
        /**
          * Keyframe name the show animation
         */
        "showAnimation"?: string;
        /**
          * When enabled, a clear icon is displayed to clear the value
         */
        "showClear"?: boolean;
        /**
          * Value of the dropdown list
         */
        "value"?: any;
        /**
          * When present, list virtual scroller is enabled
         */
        "virtualScroll"?: boolean;
    }
    interface AnyInputNumber {
        /**
          * Text to display before the value.
         */
        "aPrefix"?: string;
        /**
          * Text to display after the value.
         */
        "aSuffix"?: string;
        /**
          * Title text of the input text.
         */
        "aTitle"?: string;
        /**
          * Determines whether the input field is empty.
         */
        "allowEmpty"?: boolean;
        /**
          * Used to indicate that user input is required on an element before a form can be submitted.
         */
        "anyAriaRequired"?: boolean;
        /**
          * Inline style of the component.
         */
        "anyStyle"?: any;
        /**
          * Specifies tab order of the element.
         */
        "anyTabIndex"?: string;
        /**
          * Used to define a string that autocomplete attribute the current element.
         */
        "autocomplete"?: string;
        /**
          * Layout of the buttons, valid values are "stacked" (default), "horizontal" and "vertical".
         */
        "buttonLayout"?: string;
        /**
          * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes(https://www.currency-iso.org/en/home/tables/table-a1.html), such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB. There is no default value; if the style is "currency", the currency property must be provided.
         */
        "currency"?: string;
        /**
          * How to display the currency in currency formatting. Possible values are "symbol" to use a localized currency symbol such as €, ü"code" to use the ISO currency code, "name" to use a localized currency name such as "dollar"; the default is "symbol".
         */
        "currencyDisplay"?: string;
        /**
          * Style class of the decrement button.
         */
        "decrementButtonClass"?: string;
        /**
          * Style class of the decrement button.
         */
        "decrementButtonIcon"?: string;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether to format the value.
         */
        "format"?: boolean;
        /**
          * Style class of the increment button.
         */
        "incrementButtonClass"?: string;
        /**
          * Style class of the increment button.
         */
        "incrementButtonIcon"?: string;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * Inline style of the input field.
         */
        "inputStyle"?: any;
        /**
          * Style class of the input field.
         */
        "inputStyleClass"?: string;
        /**
          * The class of input wrapper element
         */
        "inputWrapperClass"?: string;
        /**
          * Label of the component
         */
        "label"?: string;
        /**
          * Locale to be used in formatting.
         */
        "locale"?: string;
        /**
          * The locale matching algorithm to use. Possible values are "lookup" and "best fit"; the default is "best fit". See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation for details.
         */
        "localeMatcher"?: string;
        /**
          * Maximum boundary value.
         */
        "max"?: number;
        /**
          * The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the ISO 4217 currency code list (https://www.currency-iso.org/en/home/tables/table-a1.html) (2 if the list doesn't provide that information).
         */
        "maxFractionDigits"?: number;
        /**
          * Maximum number of character allows in the input field.
         */
        "maxlength"?: number;
        /**
          * Mininum boundary value.
         */
        "min"?: number;
        /**
          * The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the ISO 4217 currency code list (https://www.currency-iso.org/en/home/tables/table-a1.html) (2 if the list doesn't provide that information).
         */
        "minFractionDigits"?: number;
        /**
          * Defines the behavior of the component, valid values are "decimal" and "currency".
         */
        "mode"?: string;
        /**
          * Name of the component
         */
        "name"?: string;
        /**
          * Callback to invoke when input loses focus.
         */
        "onAOnBlur"?: (event: AnyInputNumberCustomEvent<any>) => void;
        /**
          * Callback to invoke when input receives focus.
         */
        "onAOnFocus"?: (event: AnyInputNumberCustomEvent<any>) => void;
        /**
          * Callback to invoke when the value is entered.
         */
        "onAOnInput"?: (event: AnyInputNumberCustomEvent<any>) => void;
        /**
          * Callback to invoke when keyboard key is down.
         */
        "onAOnKeyDown"?: (event: AnyInputNumberCustomEvent<any>) => void;
        /**
          * Callback to invoke when value of componnt changes
         */
        "onValueChange"?: (event: AnyInputNumberCustomEvent<any>) => void;
        /**
          * Advisory information to display on input.
         */
        "placeholder"?: string;
        /**
          * When present, it specifies that an input field is read-only.
         */
        "readonly"?: boolean;
        /**
          * When present, it specifies that an input field is required.
         */
        "required"?: boolean;
        /**
          * Displays spinner buttons.
         */
        "showButtons"?: boolean;
        /**
          * Size of the input field.
         */
        "size"?: number;
        /**
          * Step factor to increment/decrement the value.
         */
        "step"?: number;
        /**
          * Style class of the component.
         */
        "styleClass"?: string;
        /**
          * Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
         */
        "useGrouping"?: boolean;
        /**
          * Value of the component.
         */
        "value"?: string;
    }
    interface AnyInputSwitch {
        /**
          * Inline style of the component.
         */
        "anyStyle"?: any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex"?: number;
        /**
          * Establishes relationships between the component and label(s) where its value should be one or more element IDs.
         */
        "ariaLabeledBy"?: string;
        /**
          * If `true`, the input-switch is selected.
         */
        "checked"?: boolean;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Value in unchecked state.
         */
        "falseValue"?: any;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * Name of the checkbox group.
         */
        "name"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onAOnBlur"?: (event: AnyInputSwitchCustomEvent<any>) => void;
        /**
          * Emitted when the toggle has focus.
         */
        "onAOnFocus"?: (event: AnyInputSwitchCustomEvent<any>) => void;
        /**
          * Callback to invoke when value of dropdown changes.
         */
        "onValueChange"?: (event: AnyInputSwitchCustomEvent<any>) => void;
        /**
          * When present, it specifies that the component cannot be edited.
         */
        "readonly"?: boolean;
        /**
          * Style class of the component.
         */
        "styleClass"?: any;
        /**
          * Value in checked state.
         */
        "trueValue"?: any;
    }
    interface AnyInputText {
        /**
          * Title text of the input text.
         */
        "aTitle"?: string;
        /**
          * Used to indicate that user input is required on an element before a form can be submitted.
         */
        "anyAriaRequired"?: boolean;
        /**
          * Specifies tab order of the element.
         */
        "anyTabIndex"?: string;
        /**
          * Used to define a string that autocomplete attribute the current element.
         */
        "autocomplete"?: string;
        /**
          * When present, it specifies that the element should be disabled
         */
        "disabled"?: boolean;
        /**
          * When enabled, the label will have floating effect on input text focus
         */
        "floatLabel"?: boolean;
        /**
          * Inline style of the element
         */
        "inputClass"?: string;
        /**
          * The class of input holder element
         */
        "inputHolderClass"?: string;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * Inline style of the element
         */
        "inputStyle"?: any;
        /**
          * The class of input wrapper element
         */
        "inputWrapperClass"?: string;
        /**
          * Label of the input text
         */
        "label"?: string;
        /**
          * The class of left icon wrapper element
         */
        "leftIconClass"?: string;
        /**
          * Maximum number of character allows in the input field.
         */
        "maxlength"?: number;
        /**
          * Name of the input text.
         */
        "name"?: string;
        /**
          * Callback to invoke when value of input text changes
         */
        "onValueChange"?: (event: AnyInputTextCustomEvent<any>) => void;
        /**
          * Default text to display when no value in input text
         */
        "placeholder"?: string;
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly"?: boolean;
        /**
          * When present, it specifies that an input field is required.
         */
        "required"?: boolean;
        /**
          * The class of right icon wrapper element
         */
        "rightIconClass"?: string;
        /**
          * Size of the input field.
         */
        "size"?: number;
        /**
          * Value of the input text
         */
        "value"?: string;
    }
    interface AnyInputTextarea {
        /**
          * When present, textarea size changes as being typed.
         */
        "autoResize"?: boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize"?: string;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled"?: boolean;
        /**
          * When enabled, the label will have floating effect on input text focus
         */
        "floatLabel"?: boolean;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * The class of input wrapper element
         */
        "inputWrapperClass"?: string;
        /**
          * Label of the input text
         */
        "label"?: string;
        /**
          * Name of the input text.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onAOnBlur"?: (event: AnyInputTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onAOnFocus"?: (event: AnyInputTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onAOnInput"?: (event: AnyInputTextareaCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the input has resized.
         */
        "onAOnResize"?: (event: AnyInputTextareaCustomEvent<any>) => void;
        /**
          * Emitted when the input value has changed.
         */
        "onValueChange"?: (event: AnyInputTextareaCustomEvent<TextareaChangeEventDetail>) => void;
        /**
          * Default text to display when no value in input textarea
         */
        "placeholder"?: string;
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly"?: boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * The value of the textarea.
         */
        "value"?: string | null;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: "hard" | "soft" | "off";
    }
    interface AnyListbox {
        /**
          * Inline style of the element
         */
        "anyStyle"?: any;
        /**
          * When present, it specifies that the element should be disabled
         */
        "disabled"?: boolean;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * Inline style of the list element
         */
        "listStyle"?: any;
        /**
          * Name of the dropdown input.
         */
        "name"?: string;
        /**
          * Callback to invoke when value of listbox changes
         */
        "onValueChange"?: (event: AnyListboxCustomEvent<SelectChangeEventDetail>) => void;
        /**
          * Name of the label field of an option
         */
        "optionLabel"?: string;
        /**
          * Name of the value field of an option
         */
        "optionValue"?: string;
        /**
          * An array of objects to display as the available options.
         */
        "options"?: any[];
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly"?: boolean;
        /**
          * Max height of the content area in inline mode
         */
        "scrollerHeight"?: string;
        /**
          * Value of the listbox
         */
        "value"?: any;
        /**
          * When present, list virtual scroller is enabled
         */
        "virtualScroll"?: boolean;
    }
    interface AnyRadioButton {
        /**
          * Inline style of the component.
         */
        "anyStyle"?: any;
        /**
          * Index of the element in tabbing order
         */
        "anyTabIndex"?: number;
        /**
          * When present, it specifies that the element should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * Label of the radiobutton.
         */
        "label"?: string;
        /**
          * Style class of the label.
         */
        "labelStyleClass"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Callback to invoke when the radio button loses focus.
         */
        "onAOnBlur"?: (event: AnyRadioButtonCustomEvent<any>) => void;
        /**
          * Callback to invoke when the radio button receives focus.
         */
        "onAOnFocus"?: (event: AnyRadioButtonCustomEvent<any>) => void;
        /**
          * Callback to invoke on radio button select.
         */
        "onAOnSelect"?: (event: AnyRadioButtonCustomEvent<any>) => void;
        /**
          * Style class of the component.
         */
        "styleClass"?: any;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface AnyRadioGroup {
        /**
          * If `true`, the radios can be deselected.
         */
        "allowEmptySelection"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onValueChange"?: (event: AnyRadioGroupCustomEvent<RadioGroupChangeEventDetail>) => void;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface AnyRippleEffect {
        /**
          * Sets the type of ripple-effect:
         */
        "type"?: "bounded" | "unbounded";
    }
    interface AnyTabPanel {
        /**
          * When true, tab cannot be activated.
         */
        "disabled"?: boolean;
        /**
          * Title of the tabPanel.
         */
        "header"?: string;
        /**
          * Defines if tab is active.
         */
        "selected"?: boolean;
    }
    interface AnyTabView {
        /**
          * Index of the active tab to change selected tab programmatically.
         */
        "activeIndex"?: number;
        /**
          * Inline style of the component.
         */
        "anyStyle"?: any;
        /**
          * Style class of the component.
         */
        "styleClass"?: string;
    }
    interface AnyVirtualScroller {
        /**
          * Inline style of the component
         */
        "anyStyle"?: any;
        /**
          * Class name of the content element where items will be rendered
         */
        "contentElemClass"?: string;
        /**
          * Tag name of content element whwre items will be rendered
         */
        "contentElemTag"?: string;
        /**
          * Threshold in milliseconds to delay lazy loading during scrolling
         */
        "delay"?: number;
        /**
          * Class name of the item element
         */
        "itemElemClass"?: string;
        /**
          * Height of an item in the list
         */
        "itemSize"?: number;
        /**
          * Tag name for supporting elements: spacing extra rows, empty-data row. It will be determined by itself once data provided, so it's optional. But if your data is not provided during initialization - it is better to specify this option because otherwise plugin will be unable to correctly render empty-data row.
         */
        "itemTag"?: string;
        /**
          * An array of objects to display
         */
        "items"?: any[];
        /**
          * Defines if data is loaded and interacted with in lazy manner
         */
        "lazy"?: boolean;
        /**
          * Text for placeholder element if there is no data provided
         */
        "noDataText"?: string;
        /**
          * Callback when item is clicked
         */
        "onAOnItemClick"?: (event: AnyVirtualScrollerCustomEvent<any>) => void;
        /**
          * Callback to invoke in lazy mode to load new data
         */
        "onAOnLazyLoad"?: (event: AnyVirtualScrollerCustomEvent<any>) => void;
        /**
          * Will be called right after replacing previous cluster with new one
         */
        "onClusterChanged"?: (event: AnyVirtualScrollerCustomEvent<any>) => void;
        /**
          * Will be called right before replacing previous cluster with new one
         */
        "onClusterWillChange"?: (event: AnyVirtualScrollerCustomEvent<any>) => void;
        /**
          * Will be called on scrolling. Returns progress position
         */
        "onScrollingProgress"?: (event: AnyVirtualScrollerCustomEvent<any>) => void;
        /**
          * Number of rows to display per page
         */
        "rowsPerPage"?: number;
        /**
          * Class name of the scroll element
         */
        "scrollElemClass"?: string;
        /**
          * Max height of the content area in inline mode
         */
        "scrollerHeight"?: any;
        /**
          * Inline style of the component
         */
        "styleClass"?: string;
    }
    interface IntrinsicElements {
        "any-badge": AnyBadge;
        "any-badge-overlay": AnyBadgeOverlay;
        "any-button": AnyButton;
        "any-checkbox": AnyCheckbox;
        "any-dropdown": AnyDropdown;
        "any-input-number": AnyInputNumber;
        "any-input-switch": AnyInputSwitch;
        "any-input-text": AnyInputText;
        "any-input-textarea": AnyInputTextarea;
        "any-listbox": AnyListbox;
        "any-radio-button": AnyRadioButton;
        "any-radio-group": AnyRadioGroup;
        "any-ripple-effect": AnyRippleEffect;
        "any-tab-panel": AnyTabPanel;
        "any-tab-view": AnyTabView;
        "any-virtual-scroller": AnyVirtualScroller;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "any-badge": LocalJSX.AnyBadge & JSXBase.HTMLAttributes<HTMLAnyBadgeElement>;
            "any-badge-overlay": LocalJSX.AnyBadgeOverlay & JSXBase.HTMLAttributes<HTMLAnyBadgeOverlayElement>;
            "any-button": LocalJSX.AnyButton & JSXBase.HTMLAttributes<HTMLAnyButtonElement>;
            "any-checkbox": LocalJSX.AnyCheckbox & JSXBase.HTMLAttributes<HTMLAnyCheckboxElement>;
            "any-dropdown": LocalJSX.AnyDropdown & JSXBase.HTMLAttributes<HTMLAnyDropdownElement>;
            "any-input-number": LocalJSX.AnyInputNumber & JSXBase.HTMLAttributes<HTMLAnyInputNumberElement>;
            "any-input-switch": LocalJSX.AnyInputSwitch & JSXBase.HTMLAttributes<HTMLAnyInputSwitchElement>;
            "any-input-text": LocalJSX.AnyInputText & JSXBase.HTMLAttributes<HTMLAnyInputTextElement>;
            "any-input-textarea": LocalJSX.AnyInputTextarea & JSXBase.HTMLAttributes<HTMLAnyInputTextareaElement>;
            "any-listbox": LocalJSX.AnyListbox & JSXBase.HTMLAttributes<HTMLAnyListboxElement>;
            "any-radio-button": LocalJSX.AnyRadioButton & JSXBase.HTMLAttributes<HTMLAnyRadioButtonElement>;
            "any-radio-group": LocalJSX.AnyRadioGroup & JSXBase.HTMLAttributes<HTMLAnyRadioGroupElement>;
            "any-ripple-effect": LocalJSX.AnyRippleEffect & JSXBase.HTMLAttributes<HTMLAnyRippleEffectElement>;
            "any-tab-panel": LocalJSX.AnyTabPanel & JSXBase.HTMLAttributes<HTMLAnyTabPanelElement>;
            "any-tab-view": LocalJSX.AnyTabView & JSXBase.HTMLAttributes<HTMLAnyTabViewElement>;
            "any-virtual-scroller": LocalJSX.AnyVirtualScroller & JSXBase.HTMLAttributes<HTMLAnyVirtualScrollerElement>;
        }
    }
}
